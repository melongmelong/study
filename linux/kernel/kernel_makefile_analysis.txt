kernel makefile analysis memo

./Makefile : top-level makefile. vmlinux, modules 생성 및 bzImage 생성.
  vmlinux-deps : architecture에 대한 vmlinux.lds와 %-y 각 디렉토리의 built-in.a, lib.a 파일리스트를 의미함. 즉, 아래 make variable 값으로 구성.
    KBUILD_LDS
    KBUILD_VMLINUX_OBJS
    KBUILD_VMLINUX_LIBS
  vmlinux-dirs : %-y, %-m 리스트에서 '/' 를 제거. ex. kernel/ -> kernel
  build-dirs : vmlinux-dirs와 동일
  %-y | %-m(ex. head-y, init-y, core-y, core-m ...) : make variable임. build할 디렉토리를 의미.
  decend : build-dirs의 각 디렉토리의 subdir들에대한 make처리함. 즉, 빌드 수행.
  prepare : 실제 빌드 전에 해야 할 작업들

./arch/[arch]/Makefile : bzImage를 생성하기 위한 Makefile. bzImage생성 rule이 존재
  bzImage: bzImage target. arch/x86/boot(x86기준) 으로 scripts/Makefile.build 실행. target은 $(boot)/bzImage
  boot = arch/x86/boot (x86기준)

./arch/[arch]/boot/Makefile : bzImage를 생성하기 위한 Makefile. bzImage생성 rule존재/ ./arch/[arch]/Makefile으로부터 call됨.
  $(obj)/bzImage : $(obj)/setup.bin, $(obj)/vmlinux.bin, $(obj)/tools/build 가 prerequisite $(obj)/tools/build 를 실행하여 bzImage를 생성.
  $(obj)/setup.bin : $(obj)/setup.elf가 prerequisite. objcopy를 수행하여 setup.bin 생성.
  $(obj)/setup.elf : $(src)/setup.ld $(SETUP_OBJS)를 링크하여 setup.elf생성
  setup.ld : 링크스크립트
  SETUP_OBJS : setup-y에 설정된 값
  setup-y : 빌드할 오브젝트 파일들
  $(obj)/vmlinux.bin : (obj)/compressed/vmlinux 가 prerequisite. objcopy로 vmlinux.bin생성.
  $(obj)/compressed/vmlinux : ./scripts/Makefile.build를 $(obj)/compressed로 호출. target은 $@

./arch/[arch]/boot/compressed/Makefile : piggy.o등을 생성해서 링크하여 압축된 이미지를 생성.
  $(obj)/vmlinux : vmlinux를 생성. top makefile로부터 생성된 vmlinux에 대한 처리가 수행됨. vmlinux-objs-y가 prerequisite. vmlibux-objs-y의 .o파일로부터 readelf를 통해 relocation관련 정보를 check함. 이후 링크를 수행하여 vmlinux생성함.
  vmlinux-objs-y : 링크스크립트, 각종 object파일들에 대한 리스트, piggy.o도 포함되어있음.
  $(obj)/piggy.S : piggy.o를 빌드하기 위한 target. $(obj)/vmlinux.bin.$(suffix-y)와 $(obj)/mkpiggy가 prerequisite. mkpiggy로 vmlinux.bin.$(suffix-y)로부터 piggy.S를 생성
  $(obj)/mkpiggy : piggy.S를 생성하는 tool
  $(obj)/vmlinux.bin.$(suffix-y) : vmlinux를 objcopy한 후, vmlinux.bin.$(suffix-y)로 압축하는 target

./scripts/Kbuild.include : kernel build를 위한 공통기능들 정의.

./scripts/Makefile.build : subdir build를 수행. 실제 빌드가 수행 되며 subdir로 decend도 진행 됨. 상위 Makefile의 rule에서 make -f $(build)=[path] [target] 형태로 call.
  __build: target을 생성. builtin-target, lib-target, extra-y를 빌드. 모듈인 경우 모듈관련 파일들도 빌드진행(추후확인). 추가로 subdir-ym, always에 설정된 파일들도 빌드진행.
  builtin-target : real-obj-y에 대한 archive인 built-in.a를 생성.
  real-obj-y : Makefile.build의 obj에 주어진 디렉토리에 존재하는 Makefile, kbuild로부터 설정된 obj-y의 값과 lib-ksys.o를 포함.
  lib-target : lib-y에 대한 archive인 lib.a를 생성.
  lib-y : Makefile.build의 obj에 주어진 디렉토리에 존재하는 Makefile, kbuild로부터 설정된 lib-y의 값.
  extra-y : Makefile.build의 obj에 주어진 디렉토리에 존재하는 Makefile, kbuild로부터 설정된 extra-y의 값.
  subdir-ym : __subdir-y, __subdir-m에 의해 생성되는 subdir-y, subdir-m 값 리스트. rule target으로도 동작하며, Makefile.build 를 실행. 즉 subdir make를 수행.
  __subdir-y : obj-y에서 경로를('/') 포함하는 값.
  __subdir-m : obj-m에서 경로를('/') 포함하는 값.
  
./scripts/Makefile.lib : 빌드를 위한 make variable 등 공통 기능들을 정의.

파일설명(path relative to kernel src tree) x86기준.
vmlinux : 아키텍처 독립적인 코드들로 구성된 kernel img.
arch/x86/boot/bzImage : 최종 kernel img. setup.bin, vmlinux.bin으로부터 $(obj)/tools/build tool을 이용하여 생성.
arch/x86/boot/setup.bin : arch/x86/boot/setup.elf 파일에서 objcopy한 파일.
arch/x86/boot/setup.elf : arch/x86/boot 하위 파일들을 setup.ld로 링크한 파일.
arch/x86/boot/vmlinux.bin : arch/x86/boot/compressed/vmlinux 파일에서 objcopy한 파일.
arch/x86/boot/compressed/vmlinux : arch/x86/boot/compressed 하위 파일들과 piggy.o를 링크한 파일
arch/x86/boot/compressed/piggy.o : piggy.S파일을 컴파일하여 생성한 파일
arch/x86/boot/compressed/piggy.S : vmlinux.bin.$(suffix-y)*압축파일로부터 mkpiggy tool을 사용하여 생성한 파일
arch/x86/boot/compressed/vmlinux.bin.$(suffix-y) : arch/x86/boot/compressed/vmlinux.bin 파일을 suffix-y값에 맞게 압축한 파일
arch/x86/boot/compressed/vmlinux.bin : vmlinux(top-level dir) 를 objcopy하여 생성한 파일

make관련 memo
gnu make doc 참조.
make는 expansion이 2 step으로 이루어짐. immediate, deffered. gnu make doc 3.6절 참조 => immediate는 파싱될 때, deffered는 사용될 때 expansion일어난다고 보면 될 듯.

make rule recipe에서 @: => ':'  는 shell에서 no-op을 의미. 즉. shell에서 : 실행하라는 의미. @는 command를 echo하지 말라는 의미.

pattern match(ex. %.o : %.c) 10.5.4 how patterns Match 참조. 동일 pattern target이 여러개일 경우 처리에 대해서 설명되어있음. ex. %.o : %.c rule과 %.o : %.s rule이 존재할 경우에 대한 처리 등.

이 외, multiple target, multiple rule, empty recipe/target, PHONY target(FORCE), variable, function, directive(conditional, include), automatic variable 정도는 알아두면 좋을 듯.