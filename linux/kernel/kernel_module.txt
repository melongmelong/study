next : 7-2-2 ㄱㄱ insmod 코드 분석 ㄱㄱ
         finit_module() line 4247
           load_module분석 ㄱㄱ(line 4035-4039 ㄱㄱ)
             layout_and_allocate() line 3619 ㄱㄱ

        *일단 1depth(지금 오브젝트 파일 하나있고, Makefile하나있는 수준으로 빌드어떻게 하는지 분석 ㄱㄱㄱㄱ)
        9단계전까지는 테스트머신내, /home/knw/Desktop/my_module 을 실습에 사용한다.(내용은 현단계에서 안중요함)
*1-10단계학습법 적용
*참고.
  1-6단계, 목표, 계획, 학습데이터 모으는 단계
  7단계(대충 사용 수준까지)
  8단계(이것저것해보기)
  9단계(유용한 것을 할수있는 수준까지 파기)
  10단계(가르치기)

주제 : kernel module build / load 동작 확인

학습이유
  그나마 자주 마주하는 lowlevel영역인 kernel module의 기본적인 흐름(빌드방법,빌드로직 / load방법,load로직)을 확인한다.
  *단 디바이스드라이버나 기존 나와있는 kernel module을 분석하겠다는 아니다.!

학습목표
  out of tree(=external) kernel module build 방법흐름(그대로 따라했을 때 빌드되야함)과 이에 대한 빌드 로직 분석
  out of tree kernel module load load방법흐름(그대로 따라했을 때 load되어야함)과 이에 대한 로직(큰 흐름 ex. 함수호출흐름) 분석
  hello.ko 빌드하여 load를 한다.
    
학습자료
  $(top)/Documentation/kbuild/modules.rst
  이것저것 많다.

학습계획
  milestone1. out of tree kerneml module build / load 동작분석
  
================================================================
7단계 *목표 : out of tree kernel module build / load 동작분석
7-1. out of tree kernel build
7-1-1. build방법 
  make -C [path/to/kernel/src] M=[path/to/module/src] *module build, 'modules' target 명시해도 동일함.
  make -C [path/to/kernel/src] M=[path/to/module/src] modules_install *module install
    기본적으로 external module은 /lib/modules/$(KERNELRELEASE)/extra 하위에 설치된다.
    INSTALL_MOD_PATH 변수사용해서 위치 변경가능
      ex) make -C [path/to/kernel/src] M=[path/to/module/src] INSTALL_MOD_PATH=/knwtest modules_install
        => /knwtest/lib/modules/$(KERNELRELEASE)/kernel에 설치됨.
    INSTALL_MOD_DIR 변수사용하면 extra대신 다른 경로에 설치된다.
      ex) make -C [path/to/kernel/src] M=[path/to/module/src] INSTALL_MOD_DIR=knwtest modules_install
        => /lib/modules/$(KERNELRELEASE)/knwtest에 설치됨.
  *커널빌드 시, 'O=' option으로 kernel output위치 변경했으면, 'O=' option필수!
  *$(top)/Documentation/kbuild/modules.rst 참조

7-1-2. build로직 흐름 분석
전체흐름 
  make M=[path/to/module/src] modules시의 실행되는 Makefile 순서/output 흐름.
  $(top)/Makefile : 모듈빌드를 위한 주요변수들 세팅
    $(top)/Makefile.build : *.o, *.mod, modules.order 생성
    $(top)/scripts/Makefile.modpost : (KBUILD_EXTMOD)/Module.symvers, *.mod.c 생성 
      $(top)/scripts/Makefile.modfinal : *.mod.o, *.ko 생성

  *external module 빌드디렉토리내 .cmd파일(hidden file(.으로 시작하는 파일))에 실행했던 command 기록되어있다.! 이거 참고하면 도움 됨.
    $(top)/scripts/Kbuild.include에 정의된 if_changed* 매크로들에서 찍도록 되어있음~
    목적은 잘 모르겠담;(일단 skip)
  *특정 Makefile에 없는 macro / var들은 $(top)/scripts/Kbuild.include 등 공통(?) Makefile에 정의되어있다!(이를 include하여 사용한다.)

  make M=[path/to/module/src] modules_install시의 흐름
    modules_install: *line 1835참조.
    별다른 흐름은 없고 이 rule만 실행한다!
    $(top)/scripts/Makefile.modinst 자체도 직관적이므로 별도 분석은 안함.(mkdir; cp한다음 strip필요하면하고, signing해야하면 하고...압축해야하면하고...)
      dst변수(모듈설치경로)는 $(MODLIB)/$(INSTALL_MOD_DIR) 세팅됨. => 그래서 make인자에 INSTALL_MOD_DIR로 경로 변경할수있다.
      $(MODLIB)도 $(top)/Makefile에 정의되어있음.!(line 1151-1152참조)
             
$(top)/Makefile
  make modules,modules_install target rule과 그에대한 관련변수, prerequisites들이 기술되어있음.
  make M=[path/to/module/src] modules시의 흐름 *간단하게 보여지기 위해 target: prerequisites만 기술함
    prepare: *line 1794-1795
    $(build-dirs): prepare *line 1905
      build-dirs는 external module이 존재하는 위치임(대강 make M= 값이라고 보면 됨. line 1781참조)
    descend: $(build-dirs) *line 1904
    $(MODORDER): descend *line 1782
      MODORDER변수값은 line 1156-1157 참조
    modules_check: $(MODORDER) *line 1828
    modules: modules_check *line 1824

  line 130-144
    KBUILD_EXTMOD var 세팅
    make 'M=' 변수값으로 세팅된다!
  line 167-169
    KBUILD_OUTPUT variable 세팅
     즉, 커널빌드 시 'O=' 옵션값을 해당 variable에 세팅한다.
  line 171-176
    abs_objtree variable 세팅
     즉, kernel object output의 절대경로를 세팅한다.
    KBUILT_OUTPUT 값이 not null(= 'O='옵션이 세팅O)
      abs_objtree = 'O=' 인자로 넘어온 경로로 세팅(절대경로)
    null이라면('O=' 옵션이 세팅X)
      abs_objtree = make실행한 경로로 세팅(=결국엔 커널소스 최상위 경로일듯, 절대경로)
  line 192
    abs_srctree var 세팅
    kernel src 가 존재하는 디렉토리의 절대경로를 세팅한다.
  line 239-255
    srctree var 세팅
     kernel src 가 존재하는 디렉토리의 경로를 세팅한다.(경우에따라 relative, absolute인듯.)
    abs_srctree == abs_objtree면, 현재경로(.)으로 세팅
    abs_srctree가 abs_objtree보다 한단계 상위면, 상위(..)으로 세팅
     그외는 abs_srctree로 세팅
    *abs_srctree(line 192참조), abs_objtree(line 171-176참조)
  line 666
    KBUILD_MODULES, KBUILD_BUILTIN 변수 export.
    $(top)/scripts/Makefile.build에서사용됨.
    external module빌드시에는 KBUILD_BUILTIN은 empty, KBUILD_MODULES는 1임(line 1777-1779참조)
    KBUILD_MODULES : module빌드시 1(ex. make modules 또는 kernel자체 빌드(make) 또는 external module 빌드(make M=) 즉, 커널모듈 빌드해야하면 1 안하면 empty.(모듈만하든 커널전체를하든 어쨋든 모듈은 빌드함))
    KBUILD_BUILTIN : module을 빌드하면 empty(ex. make modules시 모듈만 빌드하겠다는 의미)
  line 1156-1157
    extmod_prefix와 MODORDER변수 세팅
    extmod_prefix : $(KBUILD_EXTMOD)/ 로 세팅됨 *line 130-144참조
    MODORDER : $(extmod_prefix)/modues.order로 세팅됨.
  //line 1160-1768
    external module 빌드시에는 신경안써도됨
    KBUILD_EXTMOD 변수(line 130-144참조)세팅되어있으면 이 라인은 통째로 날라감
     *다른 line들도있는데 한눈에 파악가능함. 해당 영역은 너무 long line이라 따로 명시해둠!
  line 1781
    build-dirs 세팅
    KBUILD_EXTMOD 변수로 세팅함(line 130-144참조)
  line 1782-1783
    $(MODORDER) target rule 정의
    prerequisites : descend
  line 1794-1795
    prepare target rule
    외부모듈시에는 특별한 역할은 없음(어보임)
    *목적은 실제 descending하면서 make실행 전 실행되어야 할 target rule을 정의가 목적. line 1248의 주석참조. 
  line 1824
    modules target rule 정의(with recipe)
    prerequisites : modules_check modules_prepare
    recipe : $(srctree)/scripts/Makefile.modpost 을 현재경로(=make modules를 실행한 경로)에서 수행한다.
       하는일은 $(top)/scripts/Makefile.modpost 참조(아래분석내용)
       + 간접적으로 실제 ko파일을 생성한다.!($(top)/scripts/Makefile.modpost에 의해 $(top)/scripts/Makefile.modfinal가 수행됨)
      *srctree변수 (line 239-255 참조)
  line 1827-1828
    module_check target rule 정의
    prerequisites : $(MODORDER) *line 1156-1157참조
    recipe : $(srctree)/scripts/modules-check.sh 스크립트를 실행한다.
      modules.order파일에 중복된 모듈(.ko)가 존재하는 지 확인함. 존재하면 에러 리턴.
  line 1835
    modules_install target rule정의
    prerequisites는 없음
    recipe만 있음
      $(top)/scripts/Makefile.modinst 을 실행
      *signing필요하면 depmod.sh도 실행. 일단 skip
  //line 1858-1896
    단일 파일 빌드(ex. make foo/bar/baz.c)시의 룰. 일단 skip
  line 1904
    descend target 룰
    prerequisites : $(build-dirs) *line 1781참조
  line 1905
    $(build-dirs) target 룰 *line 1781참조
    prerequisites : prepare  *line 1794-1795참조
    recipe
      실제로 external module을 빌드함!
      *recipe에서 single-build 변수는 지금은 skip 0으로보면 됨. *line 1858-1895참조!
  참고
    make $(build)= ~~에서, build 변수는 scripts/Kbuild.include에 정의되어있음 *$(top)/Makefile에서 include함.
      'build := -f $(srctree)/scripts/Makefile.build obj'

$(top)/scripts/Makefile.build
  external module의 소스파일을 컴파일함. 링크는 안함. 즉 .ko는 안만들어짐.
  만들어지는 파일은 다음과 같음(더있지만 일단 분석했던 것들만)
    *.o : 컴파일된 오브젝트파일.  *line 286-290 참조
    *.mod : 컴파일된 오브젝트 파일 목록. *line 313-320 참조
    modules.order : .ko 파일 목록. *line 446-459참조
  line 6
    src 세팅 수행
    인자로넘어몬 obj로 세팅
    obj는 make M= 으로 넘어온 값으로 보면 된다!
  line 41-44
    external module directory에 존재하는 Kbuild 또는 Makefile을 include 함.
  line 89-97
    targets-for-modules 값 세팅
    obj-m변수에 .o확장자를 .mod로변환한한 값이 세팅됨.*obj-m변수는 external module directory에서 세팅된다. line 41-44참조
      ex. obj-m:=my_module.o이면, my_modules.mo 가 세팅
    $(obj)/modules.order도 추가.
  line 269-277
    rule_cc_o_c macro
    .c -> .o 빌드할때 사용될 recipe. (line 286-290참조)
    .c -> .o빌드뿐아니라 src check, dependency관련 작업 등등을 수행(이것들도 일단 skip)
  line 286-290
    .c -> .o build rule
    prerequisites : .c $(recordmcount_source) $(objtool_dep)
      recordmcount_source : ftrace안쓰면(CONFIG_FTRACE_MCOUNT_USE_RECORDMCOUNT) empty 쓸때만 세팅됨. 일단 skip()
      objtool_dep : stack validation(CONFIG_STACK_VALIDATION) 관련. 미사용하면 empty. 일단 skip
    recipe : rule_cc_o_c 매크로를 실행한다! 즉, .c -> .o로 빌드한다. (line 269-277 참조)
  line 313-320
    %.mod target rule
    prerequisites : %$(mod-prelink-ext).o
      mod-prelink-ext는 empty이므로, 결국 %.o 가 된다!
      *mod-prelink-ext는 LTO를 사용(LLVM관련일듯)할때만 세팅됨으로 확인 $(top)/scripts/Makefile.lib 변수/관련주석참조. 일단 skip.
    recipe : cmd_mod 수행
      .mod파일(단순하게 빌드된 파일 목록으로 보면 될 듯) 생성
  line 446-459
    modules.order target rule
    prerequisites : $(obj-m) *line 41-44참조
    recipe : cmd_modules_order 수행. line 454-456참조
      modules.order 생성하는 cmd임.
      obj-m변수값 각각에 대해, modules.order을 제외하고 .o -> .ko로 치환하여 파일에 기록한다고 보면되겠다.
  line 510-545    
    //line 510-537은 skip(single-build(ex. make foo/bar/zar.c)일때만 사용되므로)
    line 540-543
      __build target rule
      prerequisites : $(targets-for-modules) $(subdir-ym) $(always-y)
        *KBUILD_BUILTIN(empty로세팅), KBUILD_MODULES(1로세팅)는 $(top)/Makefile에 의해 export됨($(top)/Makefile line 666 참조)
        targets-for-modules *line 89-97참조
        subdir-ym, always-y : skip. 파일 하나로 되어있는 빌드시에는 사용안하는 듯. 추후 확인...
          *Documentation/kbuild/makefiles.rst보는것도 도움될듯(subdir-y, always-y)
        
$(top)/scripts/Makefile.modpost
  modpost를 실행하여 $(KBUILD_EXTMOD)/Module.symvers 생성한다.
  *.mod.c도 생성하는 듯.(by modpost command에의해 *$(top)/scripts/mod/modpost.c line 2549-2550참조)
  line 47-51
    MODPOST정의
    $(top)/scripts/mod/modpost tool을 실행하는 것이 주요 골자임.
    이후 line들에서도 옵션에 따라 다양한 MODPOST option들을 추가한다.
  //line 53-81은 skip
    external module빌드시에는 상관없음.
  line 85-87
    obj, src변수세팅
    KBUILD_EXTMOD(make M= 값)값으로 세팅($(top)/Makefile로부터(line 130-144참조) export됨!)
  line 89-90
    external module directory(=KBUILD_EXTMOD)로부터 Kbuild or Makefile include
  line 95-96
    input-symdump, output-symdump 변수 정의
    input-symdump : MODPOST input이 될 파일(Module.symvers) *kernel symbol들이라고 보면 될 듯
    output-symdump : MODPOST output이 될 파일($(KBUILD_EXTMOD)/Module.symvers) *external module symbol들이라고 보면 될 듯
  line 120
    modules변수세팅
    cat modules.order 출력으로 세팅함
    *MODORDER는 $(top)/Makefile로부터 export 됨
  line 127-133
    $(output-symdump) target rule 
    prerequisites : $(MODORDER) $(input-symdump) *mod-prelink-ext는 skip(LLVM관련해서일 듯해서 스킵~) 
    recipe : modpost를 수행한다.(MODPOST변수참조)
      *modpost : external module로부터 symbol정보를 추출하는 kernel제공 tool임.($(top)/Documentation/kbuild/modules.rst 6.2참조)
      *line 47-51참조(MODPOST변수정의)
  line 137-140
    __modpost target rule(recipe가 기술된 target rule!, 다른line에는 prerequisites만 기술되어있다.)
    prerequisites : 
    recipe : $(MAKE) -f $(srctree)/scripts/Makefile.modfinal 를 수행
      ko파일을 빌드한다.!
      *KBUILD_MODPOST_NOFINAL은 신경안써도 됨(필요할때 수동으로 1로세팅해서 사용, 일반적으로 빌드할때는 사용하지않음. empty값)

$(top)/scripts/Makefile.modfinal
  MODORDER변수에 기록된 각 모듈에 대해 
  mod.o -> .ko 를 생성한다.
  line 15-16
    modules 변수 세팅
    cat $MODORDER 으로 세팅된다. *MODORDER은 $(top)/Makefile로부터 export됨
  line 18-19
    __modfinal target rule
    prerequisites : $(modules) 
    recipe : N/A
     특별한 recipe는 없고, $(modules)를 빌드함 *line 15-16참조
  line 25-29
    %.mod.o target rule
    prerequisites : %.mod.c *$(top)/scripts/Makefile.modpost에 의해 생성됨.
    recipe : cc_o_c macro실행(line 25-26참조. 쉽게말해 compiler -c -o option으로 실행한다고 보면 됨.)
  line 33-38
    cmd_ld_ko_o macro
    linker를 사용하여 ko파일 링크하는 매크로
    scripts/modules.lds 링커스크립트를 사용하고, 
    input은 $(modules) target rule의 prerequistie(%.mod.o) 임
    *ARCH_POSTLINK가 세팅되어있으면(=  $(srctree)/arch/$(SRCARCH)/Makefile.postlink가 존재하면) 해당 make를 실행. x86에서는 없으므로 skip.
  line 57-62
    $(modules) target rule. *target 명시에 ':' 가 2갠데, gnu make의 static pattern rule 로 보면 됨.(개요는... 여러파일을 한개의 rule로 생성할 수 있다느낌...)
    modules변수에 세팅된 모든 모듈에 대해 ko를 생성한다.(지금은 1개만 하니... 일단 skip)
    prerequisites : %.o %.mod.o scripts/modules.lds 
      *$(mod-prelink-ext), vmlinux는 skip(LLVM관련해서 및 external module일때는 해당하지 않음!)
      *lds파일은 lds.S로부터 해당 룰 실행 전의 시점에 생성됨.($(top)/scripts/Makefile.build line 397-404 참조)
    recipe : ld_ko_o를 수행하여 ko를 생성함.(line 33-38참조)
      *CONFIG_DEBUG_INFO_BTF_MODULES는 debug info 관련으로 보여짐. 일단 skip. ($(top)/Documentation/bpf/btf.rst 참조)

7-2. out of tree kernel load
7-2-1. load/unload방법
  1) insmod / rmmod
  2) modprobe / modprobe -r
  모듈정보조회 : lsmod / modinfo

7-2-2. load로직 흐름 분석
1) syscall finit_module 분석
$(top)/kernel/module.c
  line 347-360
    find_sec()
      ko파일(ELF)로부터 이름이 name인 섹션의 index를 return한다.
  line 513-555
    find_symbol()
      kernel 및 kernel module(kernel에 load된)들의 exported symbol로부터 특정 symbol정보를 찾는다.
      output은
        owner(struct module*)
        crc(s32)
        sym(struct kernel_symbol*)
        license(GPL이냐 아니냐)
       참고. *___ksymtab*은 $(top)/include/asm-generic/vmlinux.lds.h에 정의되어있음.
           ___ksymtab 섹션에 정의되는(=EXPORT_SYMBOL매크로로...) 변수들이 모여있다고 보면 되겠다.
           $(top)/include/linux/export.h ___EXPORT_SYMBOL참조(line 87-112)
  line 1240-1287
    check_version()
      설정(CONFIG_MODVERSIONS)에따라 nop일수도있음.
      대략...
     ko파일의 '__version' section(setup_load_info에서 세팅)에서 특정symbol 버젼이 같은지를 비교한다.
     crc가 같아야 동일, 아니면 다름.
  line 1289-1308
    check_modstruct_version()
      'module_layout' symbol에 대해 version을 check한다(by check_version())
  line 2406-2416
    get_offset()
       해당 section의 size를 업데이트(=누적)하고,
       해당 section의 offset을 return한다.
      *line 2412는 x86에서는 nop.
  line 2427-2521
    layout_sections
       커널모듈 allocation section(sh_flags에 SHF_ALLOC 플래그가 set)의 layout정보를 세팅한다.
       다음 정보가 세팅된다.
         모든 core allocation section의 sh_entsize : 전체 core allocation section 내에서의 offset을 의미한다.(0부터 시작)
         모든 init allocation section의 sh_entsize : 전체 init allocation section 내에서의 offset을 의미한다.(0부터 시작)
      struct module의 layout size정보도 업데이트한다.
        struct module->core_layout.size/text_size/ro_size/ro_after_init_size 
           전체 core allocation section의 정보
            size : 전체 size
            text_size : exe영역 size
            ro_size : ro영역 size
            ro_after_init_size : ro_after_init영역 size 
        struct module->init_layout.size/text_size/ro_size/ro_after_init_size
           전체 init allocation section의 정보
            size : 전체 size
            text_size : exe영역 size
            ro_size : ro영역 size
            ro_after_init_size : ro_after_init영역 size 
      line 2449-2450
        ko파일의 모든 section의 sh_entsize를 초기화(~0 = 0xffffffff 으로)
      line 2452-2483
         masks의(line 2435-2446 참조) 각 entry 'm'에 대해서(=text, ro, ro_after_init section 각각에 대해)
           ko파일의 모든 non init alloc section(='.init'으로 시작하는 section)의 sh_entsize를(=offset) update.(line 2454-2465)
           struct module->core_layout.size 도 업데이트
            *이 2개 모두 get_offset()에 의해 처리됨
             단, 일부section들은 예외
             non init section이다.(='.init'으로 시작하는 section이 아니다)(by module_init_layout_section)
             masks와 다른 sh_flags를 가지는 section(=allocation section이 아닌 section)
             etc...
           이후 아래 2 필드를 최종적으로 업데이트 한다.
            struct module->core_layout.size : module의 전체 size
            struct module->core_layout.text_size : module의 text(executable) 영역 size
                                       ro_size : module의 read-only 영역 size
                                       ro_after_init_size : module의 ro_after_init 영역 size
      line 2485-2520
        위 line 2452-2483과 기본적으로 동일하다. 
        단 init section에 대해서 수행한다.
         sh_entsize에 최상위 비트에 1을 세팅한다.
         struct module->init_layout.size / text_size / ro_size / ro_after_init_size를 업데이트한다.

  line 2582-2585
    get_modinfo()
      ko파일의 .modinfo section에서 특정 filed의 value를 return한다.
  line 2699-2754
    layout_symtab()
    ko파일의 symbol 관련 section layout을  init/core allocation section에 추가한다.(젤 마지막에) *layout_sections 와 비슷
    struct load_info의 각 offset 필드도 같이 세팅해준다.~
    *CONFIG_KALLSYMS y이면 동작, 아니면 nop.
    line 2713-2717
      ko의 symbol section의 layout을 init allocation section에 추가/업데이트한다.(젤 마지막에)
    line 2718-2738
      ko의 core symbol의 layout을 core alloction section 에 추가/업데이트한다.(젤 마지막에)
    line 2740-2744
      ko의 string section의 layout을 init allocation section에 추가/업데이트한다.(젤 마지막에)
    line 2746-2753
      mod_kallsyms 정보의 layout을 init allocation section에 추가/업데이트한다.(젤 마지막에)
      
  line 2888-2950
    module_sig_check()
      현재 config로는 nop이긴함.
      그래도 간략하게 보면...
     ko파일로부터 module의 signature(pkcs7 format)을 찾아서 체크를 수행한다.
     line 2896-2910
       module signature check
       ko파일로부터 모듈시그니처를 찾고, 해당 시그니처를 비교한다.(아래 참고 참조)
        시그니처는 PKCS7 포맷(mod_verify_sig() 참조)
       *참고. 커널모듈 시그니쳐 위치 *(module_sig_check, mod_verify_sig에서 len 다루는 코드 참조해서 유추함.)
       ELF header              => lower offset
       ------------------
       ...
       ELF contents
       ...
       ------------------
       struct module_signature => 모듈시그니처
       ------------------
       MODULE_SIG_STRING       => 모듈시그니처 마커(모듈시그니처위치를 찾기 위함, ko파일의 젤 끝에 위치)
       ------------------      => higher offset
    line 2913-2935
      error handling.
    line 2937-2940
      module.sig_enforce 커널파라미터가 set이면, check실패한 signature를 가진 커널모듈은 로드하지 않음.
    line 2942
      security_* function은 LSM(Linux Security Modules)를 의미. skip
      CONFIG_SECURITY가 set되어야 사용, clear면 모두 nop(return 0)임.
      $(top)/Documentation/security/lsm.rst 참조
  line 2967-3099
    elf_validity_check()
      ELF를 체크한다.
      ELF헤더, 섹션헤더, size, machine type, section type 등등을 체크한다.
       유효하지 않으면 error를 return(-ENOEXEC *딴것도있긴함!)
  line 3190-3213
    rewrite_section_headers()
      info->sechdrs 정보를(메모리로 로드한 커널모듈의 ELF section들) rewrite함
         각 section의 sh_addr 필드를 info->hdr(메모리에 로드된 커널모듈(ko파일)) 기준으로 업데이트
        version, modinfo section의 경우 sg_flags 필드에서 SHF_ALLOC을 off함.
  line 3215-3272
    setup_load_info()
      ko파일로부터 섹션정보(index등)를 조회하여 필요한 정보(ex struct module, module이름...)들을 세팅한다.
      line 3227-3230
        ko파일의 .modinfo section에서 'name' field의 value를 가져온다
      line 3232-3247
        ko파일의 symbol table정보를 세팅한다.
         없으면 error를 return(-ENOEXEC)
      line 3249-3256
        ko파일의 .gnu.linkonce.this_module 섹션을 찾고,
        info->mod를 섹션의 시작주소로 세팅한다.
        *.gnu.linkonce.this_module 섹션의경우 struct module 구조체데이타가 존재.($(top)/tools/perf/util/probe-event.c line300, ./scripts/mod/modpost.c line2164-2194참조)
        
      line 3258-3263
        name을 얻어오지못한경우(line 3227-3230참조)
        info->mod로부터 name을 가져온다.
      line 3265-3268
        __versions섹션 index를 찾는다.
         불필요한경우(flag로 세팅) 찾지않음!
      line 3270
        .data..percpu섹션 index를 찾는다.
  line 3275-3317
    check_modinfo()
      ko파일 .modinfo section의 정보(ex. vermagic, intree, staging, livepatch, license)들을 체크한다.
       먼가 맞지 않으면 tainted 표기한다.(by add_taint_module)
      line 3277-3292
        ko파일 .modinfo section중, 'vermagic'이 kernel magic값과 같은지를 체크한다.
      line 3294-3299
        ko파일 .modinfo section중, 'intree'정보를 확인한다. 없으면 tainted 로 표기한다.
      line 3301
        cpu 보안 코드(spectre관련 일단 skip)
      line 3303-3307
        ko파일 .modinfo section중, 'staging'정보를 확인한다. 있으면 tainted 로 표기한다.
      line 3309-3311
        ko파일 .modinfo section중, 'livepatch'정보를 확인한다.
        *livepatch : system reboot없이 patch할수있는 기능. 자세한건 skip. ($(top)/Documentation/livepatch/livepatch.rst 참조)
      line 3313-3314
        license(ex. GPLv2냐...)를 체크한다. 허용되지 않는 license면 tainted로 표기한다.

  line 3534-3567
    blacklisted()
    커널모듈이름(ko파일로부터 가져옴 by setup_load_info)이 kernel parameter module_blacklist에 등록되었는 지 check한다.
    등록되어있다면 return true, 아니면 return false.
  line 3569-3628
    layout_and_allocate()
      line 3575-3577
        ko파일의 modinfo 정보를 체크한다(by check_modinfo())
      line 3579-3583
        x86에서는 nop function으로 보여짐. skip
      line 3585-3588
        ko파일의 모든 section에 대한 section flag를 체크.(by module_enforce_rwx_sections)
        CONFIG_STRICT_MODULE_RWX를 따르며 off면 nop. on이면 write/exec가능해야함.
      line 3590-3609
        pcpu, .data..ro_after_init, __jump_table section에 대해 특정 section flags를 세팅해줌.
      line 3616
        ko파일의 allocation section에 대한 layout을 세팅한다(by layout_sections)
      line 3617
        ko파일의 symbol관련 section에 대한 layout을 세팅한다.(by layout_symtab)
      line 3619-
        
      
  line 3838-3844
    may_init_module()
      finit_module수행가능한지 권한 체크
      capability(CAP_SYS_MODULE)와 커널파라미터(modules_disabled)를 체크함
  line 3975-4202
    load_module()
      line 3982-3996
        kernel module signature(pkcs7)를 체크한다.(by module_sig_check)
      line 3998-4004
        ko파일 sanity check를 수행한다.(by elf_validity_check)
        ko파일은 ELF이므로 ELF sanity check를 수0행한다.
      line 4006-4013
         필요한 섹션정보들을 세팅한다(by setup_load_info)
      line 4014-4022  
        kernel module이 blacklist인지 확인한다. blacklist라면 load하지 않는다.
      line 4024-4206
        메모리로 load된 ko파일의 elf섹션중 일부정보(sh_addrs, sh_flags)를 rewrite함(by rewrite_section_headers)
      line 4028-4032
        로드되는 kernel module의 버전을(module_layout symbol을 이용) 체크한다.(by check_modstruct_version)
      line 4035-4039
        
  line 4204-4222
    init_module()
    syscall init_module
    finit_module이랑 거의비슷, 대신 파라미터로 fd가 아닌 load된 커널모듈버퍼가 넘어오고, flag가 없음.
  line 4224-4248
    finit_module()
    syscall finit_module
    line 4230-4232
       권한체크(by may_init_module *line 3838-3844)
    line 4235-4238
      파라미터로 넘어온 flag 체크
      잘못된 flag가 넘어오면 return
     flag의미는 man page(man finit_module)참조하면 됨.
    line 4240-4245
      파라미터로 넘어온 fd 파일을 read한다.
     fd 파일은 커널모듈(.ko)이 넘어온다.(strace -f insmod 로 확인가능)
    line 4247
      call load_module()
$(top)/kernel/module-internal.h
  line 11-29
    struct load_info
    hdr : 커널모듈이 존재하는 메모리의 시작을 가리킴. 즉, ko파일의 ELF header영역을 가리킨다.
    len : 커널모듈의 사이즈.
        
  참고.
    insmod / modprobe모두 kmod 오픈소스에 포함됨.
    systemcall은 init_module/finit_module(load), delete_module(unload) 임.
      strace -f insmod하면, 최종적으로 finit_module 시스템콜 호출함을 알 수 있음.
      strace -f rmmod하면, 최종적으로 delete_module 시스템콜 호출함을 알 수 있다.
 
8단계 *목표 : 7단계 부족부분 확인
  7-1-1.
    kernel src tree가 정말 모두 필요한가?(헤더만 있으면 안되는가?) *$(top)/Documentation/kbuild/modules.rst 참조
    module signing이란?(modules_install target rule 참조)
    module versioning이란? *$(top)/Documentation/kbuild/modules.rst 참조
    module symbol이란? *$(top)/Documentation/kbuild/modules.rst 참조
    modpost란 정확히 뭔가? *$(top)/scripts/Makefile.modpost 참조
    rule_cc_o_c 정확히 하는 역할? *$(top)/scripts/Makefile.build 참조
    $(output_top)/scripts/module.lds 의미...(정확하게 잘 모르겠음, 간단한 형태긴 한데...)

  7-2-1.
    mod*(modprobe, modinfo)과 *mod(ex. insmod, rmmod, lsmod) 차이

9단계 *목표 : hello.ko kernel module 구현하여 load(load하면 helloword띄우고, unload하면 byeword띄우고...하는 수준)
Makefile생성은 $(top)/Documentation/kbuild/modules.rst 참조필요할듯.(section 3.)

10단계 *목표 : 정리

