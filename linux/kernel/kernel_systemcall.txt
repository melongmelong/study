next : 완료
*1-10단계학습법 적용
*참고.
  1-6단계, 목표, 계획, 학습데이터 모으는 단계
  7단계(대충 사용 수준까지)
  8단계(이것저것해보기)
  9단계(유용한 것을 할수있는 수준까지 파기)
  10단계(가르치기)

주제 : kernel systemcall 호출흐름

학습이유
  linux app programming에서 자주 접하는 kernel systemcall의 호출흐름을 파악한다.
  +자주 사용하던 인터페이스이므로, 커널 분석의 start point로 적합하지 않을까 싶음.!!

학습목표
  kernel systemcall(x86-64)의 호출흐름(큰 흐름)을 파악한다.
  kernel systemcall을 하나 만들어본다.(dummy형태로 괜찮음)
    
학습자료
  이것저것 많다.!

학습계획
  milestone1. kernel systemcall 학습.
  
================================================================
7단계 *목표 : 아래 참고내용 참조하여 systemcall 소스코드 분석(특정 시스템콜이 어떻게 호출되냐 콜트레이스가 그려지면 좋을 듯 하다.)
             일단 막 보면서 알게된 것들 메모하고 구조화 후, 할 것들해서 마무리하는 게 좋을 듯.
  systemcall 동작 개요 *x86_64환경.(x86_32는 다름)
    systemcall호출
      syscall x86-64 instruction(in userspace ex. libc)
      -> entry_SYSCALL_64 *systemcall entry point.(syscall_init 참조)
      -> do_syscall_64
      -> do_syscall_x64
      -> x64_sys_call
      -> systemcall handler(ex. __x64_sys_open -> __se_sys_open -> __do_sys_open) * SYSCALL_DEFINE* 매크로에 의해 정의됨($(top)/include/linux/syscalls.h, $(top)/arch/x86/include/asm/syscall_wrapper.h 참조)

    systemcall리턴
      register들을 systemcall 호출전 원상태로 돌려놓은 후,
      userspace로 리턴(by sysret or iret x86-64 instruction)한다. *sysret리턴과 iret리턴 2가지 중 한개로 분기되어 리턴됨.

    참고
      grep SYSCALL_DEFINE1 처럼 코드 써치하면 시스템콜 정의/구현 로직을 확인할 수 있음.!
  
  $(top)/arch/x86/entry/entry_64.S    
    line 87-212
      entry_SYSCALL_64
        stack에 register들 저장 후,
        do_syscall_64()를 호출한다.
         이후 register를 원래상태로 복귀 후 sysret으로 userspace로 복귀한다.

        line 90-94
          stack영역을 세팅(by stack pointer(%rsp)를 세팅)
           *참고. swapgs(maybe, PER_CPU_VAR 매크로 사용을 위함일 듯 합니다.(PER_CPU_VAR에서 gs segment사용함))
        line 98-107
          stack에 register를 push  => do_syscall_64에서 사용할 struct pt_regs 영역을 생성!
        line 109-119
          argument를 세팅하고(rdi : arg0(=>struct pt_regs), rsi : arg1(=>systemcall number)))
          do_syscall_64를 호출함.
        line 121-179
          stack frame값을 비교하여 아래 2가지 중 하나의 systemcall return logic을 결정함
            *아마도, 시스템콜 루틴 로직 실행 중 CPU가 바뀌는 케이스를 고려한 듯...(line 143 주석에 old and new CPUs라고 되어있음)
            sysret(syscall_retrun_via_sysret label)리턴(CPU가 변경되지 않음?)
            or ireq(swapgs_restore_regs_and_return_to_usermode) 리턴(CPU가 변경됨?)
        line 184-211
           sysret(syscall_return_via_sysret label) 리턴을 수행한다.
            간단하게 systemcall 호출 전 상태로 돌려놓은 후, sysret instruction을 호출한다.
          line 186
            register들을 systemcall호출전상태로 돌려놓음(rdi, rsp, gs 제외)
          line 189-209
            rdi, rsp, gs를 systemcall호출전상태로 돌려놓음
          line 211
            sysret수행(userspace로 리턴!)
            *참고. 모두 push되었을 경우stack frame형태와 offset은 아래와 같음
모두 8bytes
r15         +0   => stack_top(%rsp points to) lower_address
r14         +8
r13         +16
r12         +24
rbp         +32
rbx         +40
r11         +48
r10         +56
r9          +64
r8          +72
-ENOSYS     +80
rcx         +88
rdx         +96
rsi         +104
rdi         +112 => 여기부터는 PUSH_AND_CLEAR_REGS 매크로코드에 의해 push됨. but pop(by POP_REGS)에 의해서는 의도적으로 pop수행안함.
rax         +120   
rcx         +128 
USER_CS     +136 
r11         +144 
orig_sp     +152 
USER_DS     +160

    line 585-630
      swapgs_restore_regs_and_return_to_usermode
        syscall_return_via_sysret label과 거의 비슷함
         단 iret 을 위한 frame구성 로직이 있다!(line 608-613)
        line 598
          push된 register pop(rdi제외) *바로위에 stack frame 형태 참조.
        line 604-605
          %rsp을 시스템콜 수행전 원래값으로 복구.
        line 608-613
          iret에 의해 복귀를 위한 stack frame생성
          *Intel64 and IA-32 Architectures Software Developer's Manual, Volume 3, 6.12.1 그림 참조!
        line 626-628
          %rdi, %gs를 시스템콜 수행전 원래값으로 복구.
          *rdi의 경우 임시 scratch영역으로 쓰여(by line 624)쓰여져 stack에 임시로 원본값을 저장해놓음. 그래서 pop으로 원복필요!
        line 630
          iret수행!(line 649 native_iret 참조!)

       참고
        SYM_CODE_START(label) => label을 global로 선언 후 align하고 label위치를 정의함.(by SYM_ENTRY()) 대충 아래와 같은 코드를 생성
                                 global label; 
                                 align;
                                 lable:
        SYM_INNER_LABEL => SYM_CODE_START와 약간 비슷(label을 global로 선언하고 label위치를 정의 by SYM_ENTRY())
        UNWIND_HINT_ENTRY => debugging info를 생성하기 위한 매크로(인듯)
                             $(top)arch/x86/include/asm/unwind_hints.h에 정의되어있고, 
                                 본체인 UNWIND_HINT는 tools/include/linux/objtool.h 에 주석과함께 정의되어있다.
        SWITCH_TO_KERNEL_CR3 => page table isolation(for 보안적인 목적, userspace,kernelspace page table을 독립적으로 사용한다는 개념인 듯. 그리고 cr3는 페이지테이블 위치를 가리키는 레지스터임!)기능을 위한. 로직으로 보임. 일단 skip.($(top)/Documentation/x86/pti.rst 참고)
        IBRS_ENTER, UNTRAIN_RET, CLEAR_BRANCH_HISTORY도 일단 skip(다 커널 취약점 ex. spectre_v2, RETBleed 극복을 위한 코드들 인 것 같음, arch/x86/include/asm/nospec-branch.h, arch/x86/entry/calling.h macro정의 코드주석참조)
        PUSH_AND_CLEAR_REGS : register 일부를 push하고 clear(ex. xor %ecx, %ecx)함. $(top)/arch/x86/entry/calling.h 참조
        PER_CPU mechanism을 사용하는 이유는 systemcall을 여러 cpu가 수행할 수 있으니까로 보면 될 듯(일단은) 
        STACKLEAK_ERASE_NOCLOBBER : stack leak을 막기 위한 기능. 이것도 일단 skip(grep -r stack_erasing $(top)/Documentation 참조)
        CLEAR_CPU_BUFFERS : 이것도 보안상의 사유 skip($(top)/arch/x86/include/asm/nospec-branch.h 매크로 정의 부분 주석 참조)
               
  $(top)/arch/x86/kernel/cpu/common.c
    line 1962-1996
      syscall_init()
        syscall instruction(userspace에서 system call호출을 위해 사용하는 asm instruction) 실행 시,
        system call handler를(ex. entry_SYSCALL_64) 호출하도록 MSR을 setting한다.
         요점은, syscall instruction시, syscall handler를 entry_SYSCALL_64가 실행되도록 세팅한다.
        *IA32 emulation(=IA32 compatibility mode, line 1967-1984)는 분석 skip함.
         관련 주요 MSR
          IA32_STAR : syscall instruction handler가 사용할 세그먼트(cs, ss) 를 지정.
          IA32_LSTAR MSR : syscall instruction handler의 rip(=system call handler)
          IA32_FMASK MSR : syscall instruction handler수행 시의 eflags register값.

      참고
       wrmsr/wrmsrl() : 결국엔 native_write_msr() -> __wrmsr()를 호출한다.
                        msr(ecx로 copy)레지스터에 low(eax로 copy), high(edx로 copy)값을 세팅함.
                           아래는 __wrmsr이 컴파일된 코드 예시.
    1100:       b9 81 00 00 c0          mov    $0xc0000081,%ecx => MSR
    1105:       31 c0                   xor    %eax,%eax        => LOW
    1107:       ba 10 00 23 00          mov    $0x230010,%edx   => HIGH
    110c:       0f 30                   wrmsr

       syscall, sysenter instruction동작은 Intel64 and IA-32 Architectures Software Developer's Manual, Volume3, 5.8.7, 5.8.8 참조!
       MSR overview는 Intel64 and IA-32 Architectures Software Developer's Manual, Volume3, 9.4 참조!

                     
  $(top)/arch/x86/include/asm/irq_vectors.h
    idt vector assignment가 정의되어있음.

  $(top)/arch/x86/entry/common.c
    line 40-54
      do_syscall_x64()
      system call을 수행한다.(by x64_sys_call)
       참고
        array_index_nospec() : array range bound 체크를 수행(특정 범위(인자로 넘어온)를 절대 넘어가지 않도록 한다.)
        BUILD_BUG_ON() : compile time condition check를 위한 macro
                             내부적으로 gcc error attribute를사용함.(어떤 함수가 error attribute로 선언되어있는 경우, 해당 함수호출하는 코드(아마도 실행이 되는?)가 있다면 컴파일타임 에러(with error attribute에 인자로 넘긴 메시지)를 발생한다.)

    line 56-71
      do_syscall_x32()
      system call을 수행한다.(by x32_sys_call)
      CONFIG_X86_X32_ABI가 on되어야만 수행됨.(*현재 config로는 off이다.)
                               
    line 73-87
      do_syscall_64()
       systemcall을 수행한다. *systemcall에 대한 최초 entry point.
       line 80-83
         systemcall을 수행한다.(by do_syscall_x64, do_syscall_x32)
         systemcall number 대응하는 handler가 없으면 __x64_sys_ni_syscall()을 수행한다.
        참고
         add_random_kstack_offset() : 보안을 위한 로직(kernel stack random하게하여 kernel stack attack을 어렵게 하기 위함)
                                      $(top)/Documentation/admin-guide/kernel-parameter.txt 
                                             의randomize_kstack_offset 참조, https://lwn.net/Articles/785484/도 참조
         syscall_enter_from_user_mode/syscall_exit_to_user_mode()
           systemcall 호출 전/후 작업을 수행. 이 과정에서 systemcall number가 변경될 수도 있다(return값으로)
         instrumentation_begin/end()
           stack validation관련 로직으로 보여짐. $(top)/tools/objtool 과 연관있어보임. $(top)/tools/objtool/Documentation도 참조

  system call calltrace in kernel(ftrace 로 추출)
    cat-5104    [001] .....   302.677782: do_sys_open <-do_syscall_64
    cat-5104    [001] .....   302.677791: <stack trace>
    => 0xffffffffc0055083
    => do_sys_open
    => do_syscall_64
    => entry_SYSCALL_64_after_hwframe

  $(top)/arch/x86/entry/syscall_64.c
    system call entry정의 및 실제 system call entry를 호출수행한다.
    $(outtop)/arch/x86/include/generated/asm/syscalls_64.h 에 system call entry들이 정의되어 있음.(빌드 시 생성되는 것으로 보임.)
     해당 헤더를 사용하여, 함수선언, sys_call_table세팅, x64_sys_call function 로직생성 을 수행한다.!
    line 10-12
      system call function들을 declare함.

    line 19-23
      system call entry를 나열한 sys_call_table을 정의함.(syscall trace를 위함임. 로직에는 쓰이지 않음)

    line 27-33
      x64_sys_call()
      system call을 수행한다.(실제핸들러를 수행한다.)
      __x64_*(ex. __x64_sys_open) 과 같은 형태가 젤 처음 entry임. 이후 sys_open -> do_sys_open순으로 호출
        상세한 것은 $(top)/arch/x86/include/asm/syscall_wrapper.h 참조

  $(top)/arch/x86/include/asm/syscall_wrapper.h
     시스템콜 정의를 위한 매크로들을 정의함. $(top)/include/linux/syscalls.h에 의해 사용되는 래핑되는 매크로들로 볼 수 있음.

    line 56-59
      SC_X86_64_REGS_TO_ARGS
       시스템콜 호출 시(정확히는 __x64_sys_open -> __se_sys_open를 호출할때) 시스템콜 아규먼트리스트(pt_regs의 필드(di, si, dx, r10, r8, r9))를 생성해주는 매크로.
       => 시스템콜 파라미터갯수에따라
          1개면, "pt_regs->di"
          2개면, "pt_regs->di, pt_regs->si"
         ...
          6개면, "pt_regs->di, pt_regs->si, pt_regs->dx, pt_regs->r10, pt_regs->r8, pt_regs->r9" 를 생성함.
     __X64_SYS_STUBx() 매크로에 의해 사용됨

    line 91-97
      __SYS_STUBx
        __##abi##_##name 함수를 정의(ex. __x64_sys_open(struct pt_regs *regs))
         정의된 symbol은 __se_##name을 호출(ex. __se_sys_open)함.
        *ALLOW_ERROR_INJECTION매크로는 현재 config에서는 empty.(skip)

    line 109-116
      __MAP* 매크로 정의
       인자의미
      m : 아래 t,a에 대해 변환할 매크로(__SC_LONG, __SC_DECL, etc...가 존재함(ex. 파라미터이냐 아규먼트이냐에 등에따라 사용하는 게 다름))
      t : 시스템콜 파라미터의 타입(ex. int)
      a : 시스템콜 파라미터 이름(ex. fd)
      시스템콜 핸들러에 대한 파라미터리스트 또는 아규먼트리스트를 생성해주는 매크로.(ex. SYSCALL_DEFINE1(nice, int, increment)인 경우, "int increment" 로 만들어줌.)
      SC_X86_64_REGS_TO_ARGS 매크로, __SYSCALL_DEFINEx매크로에 의해 사용됨.
     
    line 113-115
      __X64_SYS_STUBx
        __##abi##_##name 함수를 정의(ex. __x64_sys_open(struct pt_regs *regs)) by __SYS_STUBx()

    line 245-257
      __SYSCALL_DEFINEx
        system call handler stub들을 정의. 정의되는 주요 symbol들은 다음과 같다.
          __se_sys##name (ex. __se_sys_open) //do_sys##name을 호출하는 함수
          __do_sys##name (ex. __do_sys_open) //실제 시스템콜 로직을 수행하는 함수.
          __x64_* by __X64_SYS_STUBx (ex. __x64_sys_open) //x64_sys_call에 의해 호출되는 함수. 위 __se*, __do*함수의 entry
              호출순서 : __x64_sys_open -> __se_sys_open -> __do_sys_open(실제시스템콜핸들러) *해당 소스파일 최상단 주석도 참조.
          *__IA32_SYS_STUBx 는 무의미함!
         해당 매크로의 __do_sys##name symbol에 대한 함수로직을 정의하게된다
        ex. nice() system call 구현.
          SYSCALL_DEFINE1(nice, int, increment) //__SYSCALL_DEFINEx로 expansion됨!
          {
            ...
          }
          최종적으로 아래처럼 expansion됨. *시스템콜 파라미터(ex. regs->di)에 값자체가 있을수도있고 어드레스(포인터)가 있을수도있음.(아래 예시에서 int -> char*로 바꿔서 생각해보면 된다.)
static long __se_sys_nice(int increment);
static inline long __do_sys_nice(int increment);
long __x64_sys_nice(const struct pt_regs *regs);
long __x64_sys_nice(const struct pt_regs *regs)
{
  return __se_sys_nice(regs->di);
}
static long __se_sys_nice(int increment)
{
  long ret = __do_sys_nice((int)increment);
  return ret;
}
static inline long __do_sys_nice(int increment)
{
  ...
}

  $(top)/include/linux/syscalls.h
     시스템콜 정의를 위한 매크로들을 정의함.(최상위 매크로임)
    line 209-222
      SYSCALL_DEFINE* 매크로를 정의
      SYSCALL_DEFINEx 매크로로 expansion됨 *syscall handler이름에 '_'를 추가해서 expansion함!
       아래 처럼 시스템콜을 정의/구현하기 위해 사용된다.(grep SYSCALL_DEFINE1 처럼하면 찾을 수 있음)
        ex. nice() system call 정의/구현.
          SYSCALL_DEFINE1(nice, int, increment) //__SYSCALL_DEFINEx로 expansion됨!
          {
            ...
          }

    line 226-228
      SYSCALL_DEFINEx 매크로를 정의
      __SYSCALL_DEFINEx로 expansion됨 ($(top)/arch/x86/include/asm/syscall_wrapper.h 참조)
      *SYSCALL_METADATA는 syscall tracing(kernel debug)관련 매크로임 skip.

  참고
    $(top)/Documentation/x86/entry_64.rst 참조
      아래 3개 소스파일이 나열되어있으므로, 해당 3개 코드에서 system call관련되어 보이는 코드를 분석시작한다.
       $(top)/arch/x86/kernel/traps.c
       $(top)/arch/x86/entry/entry_64.S
       $(top)/arch/x86/include/asm/irq_vectors.h
    glibc에서 시스템콜 호출하는 asm => %eax에 syscall number세팅 후, syscall instruction 수행.
      socket() function .o file objdump 일부
       0:	b8 29 00 00 00       	mov    $0x29,%eax  => 0x29(=41=socket())
       5:	0f 05                	syscall            => syscall instruction 확인가능.
      getpid() function .o file objdump 일부
       0:	b8 27 00 00 00       	mov    $0x27,%eax => 0x27(=39=getpid())
       5:	0f 05                	syscall 
      shmat() function .o file objdump 일부
       0:	b8 1e 00 00 00       	mov    $0x1e,%eax
       5:	0f 05                	syscall 
      read() function .o file objdump 일부
       9:	31 c0                	xor    %eax,%eax
       b:	0f 05                	syscall
   kernel code 참고내용
     gcc defined(x) macro : preprocessor macro임. 'x'가 정의된 macro이면 return 1 아니면 0
     likely, unlikely : 핵심은 __builtin_expect로 구현됨. 
       __builtin_expect(exp, c) : gcc builtin function.
                                  function의 값자체는 exp임.
                                       의미는 exp의 값이 c일 확률이 90% 정도이다는 의미.(=branch prediction.) => 이걸 이용해서 branch optiomization이 수행된다.(원리는 잘...) *default 90%이며 변경가능
     inline asm : https://gcc.gnu.org/onlinedocs/gcc/Extended-Asm.html, https://wiki.kldp.org/wiki.php/DocbookSgml/GCC_Inline_Assembly-KLDP 참조
     tracepoint_enabled()로 감싸진 코드는 커널 tracing을 위한 mechanism임. 자세한 구현은 skip하였음.($(top)/Documentation/trace/tracepoints.rst 참조)
     어셈블리 매크로는 https://sourceware.org/binutils/docs/as.html#Macro를 참조
       macro 아규먼트는 macname argname1 argname2 (또는 argname1, argname2)로 선언 (argname=1 처럼 default값 세팅가능)
       macro내에서 아규먼트 참조는 \argname1, \argname2로 가능. *\@은 그냥 특정 integer로 치환되는 듯...
       argname뒤에 ':'은 argument속성으로 대충 보면 될듯.
       macro에 파라미터전달은 macname argname1=1 형태로 전달가능.
    ALTERNATIVE 매크로 : cpu instruction을 old instruction -> new instruction으로 바꿔줌... 정확한 사유와(cpu model에 더 적합한 명령어를 사용하기 위함인 듯...) mechanism등은 skip...(잘모르겠음) 
       
                     
8단계 *목표 : 7단계 부족했던 부분 추가 학습 + 이것저것해보기
  libc systemcall 코드 어떻게 빌드되는 지? 확인(systemcall 코드들이 어떻게 생성되는 지 위주로)
     socket(1,2,3); 을 빌드했을때의 objdump결과 *libc는 static link하였음!
      코드($(top)/arch/x86/include/asm/syscall_wrapper.h 참조)에 나와있는 것처럼, 레지스터(rdi, rsi, rdx)에 순서대로 아규먼트를 세팅 + eax에 syscall number세팅 후, 최종적으로 syscall instruction을 수행함을 알 수 있다.
     => System V AMD64 ABI 를 따른다!
      <main>
      ...
      bc39:       ba 03 00 00 00          mov    $0x3,%edx
      bc3e:       be 02 00 00 00          mov    $0x2,%esi
      bc43:       bf 01 00 00 00          mov    $0x1,%edi
      bc48:       e8 73 a3 04 00          callq  55fc0 <__socket>
      ...
      <__socket>:
      55fc0:       b8 29 00 00 00          mov    $0x29,%eax
      55fc5:       0f 05                   syscall
      ...

  $(top)/arch/x86/entry/entry_64.S
    line 121-179의 의미 and swapgs_restore_regs_and_return_to_usermode 하는 것 확인 필요.
     7단계 swapgs_restore_regs_and_return_to_usermode 분석 참조
    but, line 127-179의미는 정확하게 파악 어려움... 다음으로 넘긴다.
    
  libc systemcall 코드 어떻게 수행되는 지? 확인(plt개념...) *optional(static libc를 링크하면 plt없이 바로 call 함)
  syscall_init()에서 사용하는 wrmsr코드를 좀 더 공부하는 것도 좋긴할 듯 *optional(inline asm을 제대로 이해못함 뭘하는진 대충은 알고.)
  linux segmentation, paging도 내용을 알아야할 듯...(이건 이번에 할 건 아닌 듯)
  kernel alternatives도 재밌는 주제일 것 같음...이것도 systemcall과는 별도로...
  PER_CPU_VAR* facility도 재밌는 주제일 것 같음... 이것도 systemcall과는 별도로...

9단계 *목표 : systemcall 직접 추가 실습.
  추가단계
    적당한 소스파일에 SYSCALL_DEFINE* 로 system call 구현.
    $(top)/include/linux/syscalls.h에 system call prototype 정의.(x86에서는 안해도됨, 구조가 살짝 다름)
    syscall table에 등록(x86의 경우, $(top)/arch/x86/entry/syscalls/syscall_64.tbl)
    fallback stub정의($(top)/kernel/sys_ni.c) (optional)
      *COND_SYSCALL : weak syscall handler symbol에 대해 sys_ni_syscall로 매핑하는 매크로임.
        즉, 해당 시스템콜이 구현안되어있으면, sys_ni_syscall을 실행하겠다.
    *시스템콜 핸들러 포함유무에 관한 Kconfig(CONFIG_*) option추가(optional)

  예제코드(일부)
    kernelspace
      arch/x86/entry/syscalls/syscall_64.tbl
        ...
        449	common	knwtest			sys_knwtest //테이블에 추가
        ...
      kernel/sys.c
        ...
        SYSCALL_DEFINE1(knwtest, int, val)  //시스템콜구현
        {
          printk("knwtest val : %d\n", val);
          return 0;
        }
        ...
    userspcae
      #include <stdio.h>
      #include <sys/syscall.h>
      #include <unistd.h>
 
      int main(int argc, char **argv)
      {
        int val = 1234, ret = 0;

        ret = syscall(449, val); //449번 시스템콜(knwtest) 호출

        return 0;
      }

  참고
    $(top)/Documentation/process/adding-syscalls.rst 참조

10단계 *목표 : 정리
  알게된 것
    x86-64 bit환경에서, kernel system call 수행과정.
    x86-64 bit환경에서의 kernel system call 관련 된 주요 코드/매크로 로직.
    x86-64 bit환경에서의 kernel system call 추가.

  코멘트
    시스템콜 return시, 왜 2path로 나뉘어지는 지는 아직 명확히 확인불가 이런 걸 알 수 있게되면 좋을 것 같다.
    이 외 로우레벨은 좀 더 정진해야겠다.! 
==========참고====================================================================================
next : issuing a system call via systenter/Exiting from the system call 내용확인.(understanding the linux kernel, chapter 10 System Calls, The sysexit instruction)
         chapter4장이랑 같이 확인해서 정리필요.
       system call entry 코드(entry_SYSCALL_64) 분석(176 line부터.).

kernel systemcall source analysis

systemcall 개요(understanding linux kernel 기반으로 정리)
  정의 : a system call (commonly abbreviated to syscall) is the programmatic way in which a computer program requests a service from the kernel of the operating system on which it is executed

  POSIX APIs and System Calls
    POSIX API != System calls
    일반적으로 POSIX API들이 System Calls을 wrapping해서 user program이 사용할 수 있도록 기능 제공
    ex. malloc의 경우 brk system call사용

  System Call Handelr and Service Routines
    각 system call은 system call handler를 통해서 실행됨. system call 수행은 대략 다음의 순서를 가짐
    1. system call handler수행(software interrupt 등을 통해). 이 시점에서 User -> Kernel mode로 switch
    2. system call handler에서 필요한 레지스터들을 kernel stack에 저장
    3. system call handler에서 실제 system call 호출 후 system call수행.
    4. system call handler에서 kernel stack에 저장된 레지스터 복구, kernel -> user mode로 switch.

    각 system call은 system call number가 부여되어 있고, 해당 정보를 system call handler 실행할 때 파라미터로 전달함.(ex. %eax register에 system call number를 세팅)

  Entering and Exiting a System Call
    x86에서는 system call호출 및 exit 방법은 다음과 같음
      int(int 0x80)-iret instruction을 통해 
      sysenter-sysexit instruction를 통해
      kernel의 경우 compatiblility를 고려해야함(ex. libc가 int만 지원하는 경우, sysenter가 없는 프로세서에서 어떻게 처리할 것인지? 등등...)
    issuing a System Call via the int 0x80 instruction
      kernel 초기화 시점에 0x80에 대한 interrupt handler가 등록 됨
        set_system_gate(0x80, system_call)
        => interrupt descriptor fields를 적절하게 설정. 즉, int 0x80 발생하면, system_call이 수행
        => system_call이 system call entry point로 볼 수 있음.
             
      큰 흐름은 다음과 같음(understanding linux kernel참조)
        -register를 stack에 저장
system_call:
pushl %eax
SAVE_ALL
movl $0xffffe000, %ebx /* or 0xfffff000 for 4-KB stacks */ => current process의 thread_info 구조체를 구해옴.
andl %esp, %ebx

        -do_syscall_trace() //tracing flag(thread_info 구조체)가 set된 경우
        -system call number validation check
cmpl $NR_syscalls, %eax
jb nobadsys
movl $(-ENOSYS), 24(%esp)
jmp resume_userspace       //user mode로 복귀 label
nobadsys:
         -system call 호출 
call *sys_call_table(0, %eax, 4)

           -함수리턴값 저장(%eax에 리턴된 시스템콜 리턴값을 스택에 저장함)
movl %eax, 24(%esp)
         -flag check.
cli
movl 8(%ebp), %ecx
testw $0xffff, %cx
je restore_all        //stack에있는 register정보를 reload. 
         -do_syscall_trace() //tracing flag(thread_info 구조체)가 set된 경우
         -flag결과에 따라 resume_userpsace / work_pending label로 jmp. 해당 코드들에 의해 실제 시스템콜로부터 복귀전에 둘 다 스케줄링, signal처리 등등을 수행함.

    issuing a System Call via sysenter instruction
      int 0x80은 sanity check등이 수행되므로 느리다는 단점이있음. systenter는 이런걸 수행하지 않고, User <-> Kernel mode switch 더 빠름.
      The systenter instruction
        주요 레지스터
         SYSENTER_CS_MSR :The Segment Selector of the kernel code segment
         SYSENTER_EIP_MSR : The linear address of the kernel entry point
         SYSENTER_ESP_MSR : The kernel stack pointer
        수행과정
         1. Copies the content of SYSENTER_CS_MSR into cs .
         2. Copies the content of SYSENTER_EIP_MSR into eip .
         3. Copies the content of SYSENTER_ESP_MSR into esp .
         4. Adds 8 to the value of SYSENTER_CS_MSR , and loads this value into ss .

      The vsyscall page
        linux kernel이나 cpu가 sysenter지원하지 않을 경우, 호환을 위한 code가 들어있는 page(메모리)
        execv system call수행하여 user process실행되면 해당 process에 적절한 code를 link함.     

      Entering the system call
      -__kernel_vsyscall 수행됨(라이브러리에서(ex. standard library) 실행 )
       -해당 코드에서 stack에 필요 정보들 저장 후 sysenter instruction 수행
      -sysenter_entry 수행((pointed to by the SYSENTER_EIP_MSR register))
          필요한 작업들 수행(스택에 필요정보저장, interrupt enable 등)
      -int 0x80의 시스템콜 절차 수행함(위 내용 참조, system_call label부터 동일하게 수행)

      Exiting from the system call
        system_call label(int 0x80 systemcall 내용참조)과 동일한 작업 수행.
         이후, sysenter_entry에서 스택에 저장한 정보들 pop후 User Mode로 switch 및 SYSENTER_RETURN 수행.
          
        
          
  참고. understanding linux kernel (chapter 10. syustem calls)
       wikipedia(systemcall)

registering interrupt handler(x64)
start_kernel
  trap_init
    cpu_init
      syscall_init

system call
interrupt!
  entry_SYSCALL_64
    do_syscall_64
      sys_call_table[SYSCALL] -> 실제 시스템콜 루틴.

  system call ftrace시 다음과 같은 trace가 출력됨. 
    do_syscall_64
      __x64_sys_sendto
        __sys_sendto

    ./arch/x86/include/asm/syscall_wrapper.h파일의 __SYSCALL_DEFINEx() macro 참조.
    do_syscall_64
      sys_call_table[SYSCALL] 
    macro 처리에 의해 systemcall과정에서, sys_call_table[SYSCALL]은 __x64_sys_sendto를 호출.
    __x64_sys_sendto는 macro(__SYS_STUBx())에 의해 __se_sys_sendto()를 호출하고
    __se_sys_sendto()에서 __do_sys_sendto 호출
    __do_sys_sendto()에서(SYSCALL_DEFINE()의 {}로 작성된 본체) __sys_sendto를 호출하게 됨

syscall_init
  syscall, sysenter instruction 실행을 위해 MSR들을 적절한 값으로 세팅.
  entry_SYSCALL_64 가 64bit systemcall entry임.
  *intel 64bit arch의 경우 MSR register기반으로 systemcall이 실행 됨.

sys_call_table
  kernel build과정에서 system call table(syscall_64.tbl)을 사용하여 header가 생성되며
  해당 header파일을 include하여 sys_call_table을 population 함.

./arch/x86/entry/entry_64.S
145-276
  entry_SYSCALL_64
  153-168
    gs register값을 변경(rsp register값이 변경됨.)
     이 후, 새로운 stack에 필요한 값들을 push.
  172-175
     call do_syscall_64 

systemcall x86-64 arch 관련 개요
MSR 기반으로 systemcall 처리.
관련 register들은 아래와 같음
  MSR_STAR : syscall instruction 실행 시 사용 됨, 사용할 CS, SS 의 값.
  MSR_LSTAR : syscall instruction 실행 시 사용 됨, 사용할 address(instruction pointer) 값

  MSR_CSTAR : sysenter instruction 실행 시 사용 됨, 사용할 address(instruction pointer) 값(compatibility mode인 경우)
  MSR_IA32_SYSENTER_CS : systenter instruction 실행 시 사용 됨, 사용 할 CS의 값
  MSR_IA32_SYSENTER_ESP : systenter instruction 실행 시 사용 됨, 사용 할 RSP(stack pointer)의 값
  MSR_IA32_SYSENTER_EIP : systenter instruction 실행 시 사용 됨, 사용 할 address(instruction pointer) 의 값
                          linux의 경우, MSR_CSTAR와 동일 값이지만, cpu mode에따라 사용하는 값이 다른 듯함.

system call 진입 instruction에 따라서, 특정 MSR값을 각 레지스터(CS, SS, RSP, RIP 등..) 로드하여 function(MSR_LSTAR, MSR_CSTAR, MSR_IA32_SYSENTER_EIP)을 실행시킴.

참조
  https://0xax.gitbooks.io/linux-insides/content/SysCall/linux-syscall-2.html
