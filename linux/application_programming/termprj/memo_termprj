9단계. term project(client close function구현(spec 2-2마무리), 소스코드 리팩토링 진행필요)

simple echo server, echo client 스펙
  server
    server는 다중 클라이언트에게 동시 서비스 가능하다.
      *서버구조는 multi-process, multi-thread, multi-plexing(select, poll 둘다) 3가지방법 각각으로 모두 구현한다. 이는 프로그램 파라미터로 선택할 수 있다.
    signal(SIGUSR)을 받으면 클라이언트로 특정메시지를 broadcast한다.
       메시지는 configurable하다.(파일에다쓴다.), 설정파일이 없으면 default는 "broadcast" 이다.
      broadcast메시지는 interleaved되선 안된다.(추가시점은 적당한 곳, interleaved만 안되면 됨.)
    echoed데이타는 interleaved 되지않고, 수신순서대로 client로 다시 전달되어야 한다.
    client로부터 일정시간 echo-back할 데이터가 수신되지않으면, client 연결을 종료한다.(with 관련 리소스해제)
    signal(SIGINT)를 받으면, 리소스를 모두 해제후 종료한다.
  client
    사용자입력 or 파일로부터 데이터를 읽어서 에코서버로 데이타를 전송한다.
    signal(SIGINT) or 파일read가 완료되면 서버로부터 모든 데이터를 echoed-back 및 리소스를 모두 해제 후 종료한다.

원칙
  TDD를 수행한다.
    행위중심. 메서드중심이 아닌 형태로
    테스트코드도 산출되어야 한다.
    테스트 프래임워크는 CUnit을 사용한다.
    red - green cycle
    개발과정에 녹아들도록(테스트만 먼저 쭉 작성하는 것은 금지)
  code complete내용을 참고삼아 코드를 작성해본다.

  참고. commit msg 일반적인 규칙(https://cbea.ms/git-commit/) *어디서 가져온지는 모르겟음... 시간나면 찾아보까?(8/9단계 쯤?)
Tim pope의 커밋 메시지 템플릿

Capitalized, short (50 chars or less) summary                                                         => 제목
                                                                                                      => CRLF
More detailed explanatory text, if necessary. Wrap it to about 72 characters or so. In some           => 본문
contexts, the first line is treated as the subject of an email and the rest of the text as 
the body. The blank line separating the summary from the body is critical (unless you omit 
the body entirely); tools like rebase can get confused if you run the two together.

Write your commit message in the imperative: "Fix bug" and not "Fixed bug" or "Fixes bug." 
This convention matches up with commit messages generated by commands like git merge and 
git revert.

Further paragraphs come after blank lines.

- Bullet points are okay, too

- Typically a hyphen or asterisk is used for the bullet, followed by a single space,
with blank lines in between, but conventions vary here

- Use a hanging indent

If you use an issue tracker, add a reference(s) to them at the bottom, like so:
                                                                                                      => CRLF
Resolves: #123                                                                                        => Comment
  
TDD cycle
  spec1. server는 다중 클라이언트에게 동시 서비스 가능하다.
    (v)spec1-1. 동시에 여러개의 클라이언트의 접속요청을 수신가능하다.
    (v)spec1-2. 서버가 연결을 종료하면, 클라이언트와의 연결을 종료한다.

  spec2. client는 사용자입력 or 파일로부터 데이터를 읽어서 에코서버로 데이타를 전송한다.
    (v)spec2-1. client는 서버로 접속요청이 가능하다.
    (v)spec2-2. client는 서버와 연결종료가 가능하다.
  



