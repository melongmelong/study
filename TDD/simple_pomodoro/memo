next : 완료.

1-10단계학습법 적용을 위한 간단한 접근.
https://stackoverflow.com/questions/68588035/c-returning-local-struct-works-but-returning-local-array-does-not
1) TDD
학습이유
  실프로젝트 적용하면 많은 도움(TDD를 함으로써 얻는 이점들.. 테스트코드작성, 좋은 코드구조?...)이 될 듯 하고,
  실프로젝트 적용을 해보고싶음.
  최근 프로젝트들은 테스트코드 없지않아보임. 안하면 뒤쳐지는 듯.
  등등?
학습목표
  간단한 프로젝트에 TDD 실적용하기.(make를 통한 빌드 시, 테스트코드 실행하고, 성공시 빌드성공하여 아웃풋, 테스트실패면 실패)
  간단한 프로젝트 주제 : 뽀모도로 타이머 cli판?(https://pomofocus.io/)
    시작버튼을 누르면
    1뽀모 25분 이후 5분 break
    이후 또 시작을 누르면
    1뽀모 25분 이후 5분 break
    ...반복하다가...
    4번째 뽀모가 끗나면 15분 break
    를 반복...
    총 뽀모도로를 출력
       
학습자료
  TDD책(집에있음)
  위키(https://en.wikipedia.org/wiki/Test-driven_development) 
  구글링(keyword TDD)
  학습순서(툴, CUnit ...)
  gtest
  TDD 이론 개요(하는 법(TDD cycle)) 목표 : 중요한 이론 인식(정의, 수행방법 주요사항)
  툴 하나 선택해서 초간단 TDD 시도(해보긴했는데 다시..) 목표 : 사용할 툴 선택 및 한번 해보면서 느껴보기(다음단계를 위한 느낀점 등등 메모)
  프로젝트에 TDD 적용하여 진행. 목표 : 윗 단계를 좀 더 진지빨고 하기.

참고.
  1-6단계, 목표, 계획, 학습데이터 모으는 단계
  7단계(대충 사용 수준까지)
  8단계(이것저것해보기)
  9단계(유용한 것을 할수있는 수준까지 파기)
  10단계(가르치기)


TDD이론개요
  7단계
    TDD?
      SW development process
      testcase자체가 SW의 요구사항..(software development process relying on software requirements being converted to test cases)
      all testcase에 대해 SW를 반복적으로 테스트하면서 개발을 tracking(tracking all software development by repeatedly testing the software)

    advantages?
      적은 디버깅 시간(테스트케이스가 있으므로, 실패하면 version control system을 통해 정상적이버전으로 돌려놓을 수 있음.)
      프로그램 디자인에 영향을 줌(테스트를 먼저 생각하므로, 어떻게 사용될 지, 즉 인터페이스를 먼저 생각함)
      필요한 작은 절차만 수행하여 중요한 목표에 집중할 수 있음.(테스트 성공이 최우선 목표이고, 예외는 별도로 처리 됨)
      더 많은 코드가 필요하지만(테스트코드가 필요), 결함을 줄임.
      더 모듈화되고 유연성있고 확장성있는 코드를 생산할 수 있음.(테스트가능하도록 만들어야 하므로...)
      자동화된 테스트들은 모든 코드 패스를 cover함(코드를 짜기전 failing test case를 만들고, 이 테스트를 pass하도록 해야함..)
      등등.....

    TDD Cycle
      1. Add a test(feature를 패스하기 위한 테스트를 작성)
      2. Run all tests. The new test should fail for expected reasons(말그대로 테스트 실행 *새로추가된 테스트는 무조건 실패)
      3. Write the simplest code that passes the new test(테스트 통과를 위한 가장 단순한 코드작성. 테스트통과 외의 다른 코드는 작성되면 안됨.)
      4. All tests should now pass(모든 테스트를 통과함.)
      5. Refactor as needed, using tests after each refactor to ensure that functionality is preserved(코드 리팩토링!)
      Repeat!

  8단계
    TDD책(테스트 주도 개발 by 켄트 벡) 메모내용들
      기본 규칙(초반 페이지에 나옴)
        오직 테스트 실패인 경우만 새로운 코드 작성
        중복제거
      기본 규칙에 기반한 프로그래밍 순서
        1. 빨강 : 실패하는 작은 테스트 작성, 컴파일조차 안 될수도 있음.
        2. 초록 : 최대한 빨리 테스트 통과할 수준으로만 코드를 작성.(변수명을 melong 처럼 지어도 상관없음, 중복많아도 상관없음. 함수에서 상수값만 반환해도 상관없음)
        3. 리팩토링 : 리팩토링수행.

    테스트케이스 작성 시, 주의사항
      테스트케이스들 간의 의존성은 없어야 함.(ex. 현재 테스트케이스 결과가 이전 테스트케이스 결과에 영향받으면 안됨.)
      테스트케이스가 너무 구현상세를 테스트해서는 안 됨.
      필요이상의 검증은 피해야 함(all knowing oracle ???)
      느린테스트케이스 생성은 피해야 함

   테스트케이스의 정도?(granularity?)
     마땅한 답은 없는 듯,
     단, 테스터라면 해당 스펙을 테스트하기 위해 어떤 테스트들을 할것인가?에 초점을 맞춰라 라는 글이 기준 세우는데 도움이 되는 듯함.

   Xunit?
     unit testing framework들을 일컫는 말. 
       Cunit도 Xunit framework중 하나임! ㅎㅎ

     주요컴포넌트
      Test Runner : 
      Test case : 테스트케이스
      Test fixtures : 테스트(Test case) 수행이 필요한 전제조건/상태들의 집합.
      Test suites : 같은 Test fixtures를 공유하는 테스트(Test case)들의 집합.
      Test execution : 모든 test case들은 setup ~ teardown 의 절차를 가짐
      Test result formatter : 테스트결과 출력 시의 포맷팅.
      Assertions : 어떤 동작을 검증하기위한 기능/매크로. 일반적으로 logical condition을 나타냄.

    기타
      TDD와 연관있는 규칙! (필요한 코드만 작성!)
        KISS(keep it simple, stupid)
        YAGNI(You aren't gonno need it)
  9단계
    딱히할건 없어보이네요
 10단계
   TDD정의
      SW development process
      testcase자체가 SW의 요구사항임.(software development process relying on software requirements being converted to test cases)
      all testcases에 대해 SW를 반복적으로 테스트하면서 개발을 tracking(tracking all software development by repeatedly testing the software)

   TDD장점
     명확한 목표.
     더 좋은 디자인을 가진 SW개발이 가능해짐.
     결함을 낮춤

  TDD수행방법
      1. Add a test(feature를 패스하기 위한 테스트를 작성)
      2. Run all tests. The new test should fail for expected reasons(말그대로 테스트 실행 *새로추가된 테스트는 무조건 실패)
      3. Write the simplest code that passes the new test(테스트 통과를 위한 가장 단순한 코드작성. 테스트통과 외의 다른 코드는 작성되면 안됨.)
      4. All tests should now pass(모든 테스트를 통과함.)
      5. Refactor as needed, using tests after each refactor to ensure that functionality is preserved(코드 리팩토링!)
      Repeat!

      간단하게 '빨강/초록/리팩토링' 순서.
        1. 빨강 : 실패하는 작은 테스트 작성, 컴파일조차 안 될수도 있음.
        2. 초록 : 최대한 빨리 테스트 통과할 수준으로만 코드를 작성.(변수명을 melong 처럼 지어도 상관없음, 중복많아도 상관없음. 함수에서 상수값만 반환해도 상관없음)
        3. 리팩토링 : 리팩토링수행.

  TDD의 테스트케이스의 정도.
    마땅한 답은 없으나, 자기가 테스터라면 해당 스펙을 테스트하기 위해 어떤 테스트들을 할것인가?에 초첨을 맞추면 기준을 세우는 데 도움이 됨.

  테스트케이스 주의사항
      테스트케이스들 간의 의존성은 없어야 함.(ex. 현재 테스트케이스 결과가 이전 테스트케이스 결과에 영향받으면 안됨.)
      테스트케이스가 너무 구현상세(implementation)를 테스트해서는 안 됨.
      필요이상의 검증은 피해야 함(all knowing oracle ???)
      느린테스트케이스 생성은 피해야 함
  
툴 하나 선택해서 초간단 TDD 시도
  7단계
   xUnit?
     definition : xUnit is the collective name for several unit testing frameworks that derive their structure and functionality from Smalltalk's SUnit
     *Sunit : Smalltalk용 유닛 테스팅 프래림워크임.
     *Sunit이 다양한 언어들에도 적용되면서, xUnit이 됨.
     *xUnit인 이유는, Java면 'J'unit, C면 'C'unit, Smalltalk면 'S'unit...처럼 명명되서 'x'Unit임.

   xUnit 구조
      Test Runner : xUnit framework기반으로 구현된 테스트를 실행하고, 결과를 출력하는 실행프로그램.
      Test case : 가장 기초적인 class이며, unit test들은 해당 class를 상속받음. => 즉, 그냥 테스트케이스를 의미한다고 볼 수 있음.(?)
      Test fixtures : 테스트(Test case) 수행에 필요한 전제조건/상태들의 집합. 
      Test suites : 같은 Test fixtures를 공유하는 테스트(Test case)들의 집합.
      Test execution : 모든 test case들은 setup ~ teardown 의 절차를 가짐
      Test result formatter : Test Runner 의 결과(테스트결과) 출력 시의 포맷팅.
      Assertions : 어떤 동작을 검증하기위한 기능/매크로. 일반적으로 logical condition을 나타냄.

   이번에 사용할 놈은 CUnit을 사용할거임
     CUnit사용법은 공식홈피참조(https://cunit.sourceforge.net/index.html)
     공식홈피 매뉴얼 Doc보면서 주요내역 memo
      CUnit에서 사용하는 개념(?)
        Test registry : Test suite의 집합. active regestry에 등록된 Test suite만 실행됨
        Test Suite : Test case의 집합.

    빌드방법
      autoreconf -i (의미는 파악필요함.. 이거 수행해야 ./configure script 생성 됨.)
       이후는 일반적인 라이브러리 빌드과정과 동일
        
    사용방법
      CUnit library를 링크해주어야 함.
       테스트용 make file참조

  8단계
    기본 사용안은 CUnit manual의 1.3.General Usage보면되고, 여기서 붙여나가면 될 듯.
      https://cunit.sourceforge.net/doc/introduction.html#structure

  9단계
    만들어볼 스펙
      두 정수와 operator(+, -, *, /)를 입력받아 사칙연산 결과를 사용자에게 출력
      사용자 입력은 1+1과 같은 문자열.
      사용자로 출력은 결과값 하나(ex. 2)

    TESTCASES
     (v)사용자입력이 [num][op][num] 형태가 아니면 에러를 출력
       (v)"1+1" 은 허용
       (v)"1 + 1"은 허용 X
       (v)"1-1"은 허용
       (v)"1*1"은 허용
       (v)"1/1"은 허용
       (v)"1 - 1"은 허용X
       (v)"1 * 1"은 허용X
       (v)"1 / 1"은 허용X
       (v)"1a+1a"는 허용X
       (v)"1b+1b"는 허용X
       (v)"1c + 1c"는 허용X
       (v)"1$+1$"는 허용X
       (v)"1+1+1"은 허용 X
       (v)4*-2는 허용
       (v)5--1은 허용 X
     (v)[op]가 +면 두 숫자를 더한 결과를 리턴 
       (v)1+1는 결과가 2
       (v)-1+1은 결과가 0
       (v)-1+-1은 결과가 -2
     (v)[op]가 -면 두 숫자를 뺀 결과를 리턴 
       (v)1-1는 결과가 0
       (v)-1-1은 결과가 -2
       (v)-1 - -1은 결과가 0
     (v)[op]가 *면 두 숫자를 곱한 결과를 리턴
       (v)2*2 = 4
       (v)-2*2 = -4
       (v)-2*-2 = 4
     (v)[op]가 /면 두 숫자를 나눈 결과를 리턴
        (v)2/2 = 1
        (v)2/-2 = -1
        (v)-2/2 = -1
        (v)-2/-2 = 1
     (v)입력된 값을 파싱(결과 처리를 위해)
      (v)"1+1"이면, lval=1, rval=1, op='+'
      (v)"3-1"이면, lval=3, rval=1, op='-'
      (v)"2*2"이면, lval=2, rval=2, op='*'
      (v)"4/2"이면, lval=4, rval=2, op='/'

     (v)파싱된 값으로 오퍼레이터에 따라 결과 리턴
       (v)"1+1"이면, lval=1, rval=1, op='+'이므로, 결과는 2
       (v)"3-1"이면, lval=3, rval=1, op='-'이므로, 결과는 2
       (v)"2*2"이면, lval=2, rval=2, op='*'이므로, 결과는 4
       (v)"4/2"이면, lval=4, rval=2, op='/'이므로, 결과는 2

      *했던고민...
        -사용자입력 파싱이 필요한데, 파싱하는 기능은 TESTCASE대상일까???
          이걸 스펙으로 봐야할까?
         implementation을(구현상세) 테스트 하지말라고했는뎅...
          일단 잘 모르겠고,,, 파싱도 잘되는지 테스트필요하니 테스트케이스 구현하자!

       -아래 형태의 코드도(파싱한 오퍼레이터에 따라 적절한 함수호출하는 로직...) 테스트케이스로 만들어야 하는가?
 19         switch (parsed.op) {
 20                 case '+':
 21                         ret = add(parsed.lval, parsed.rval);
 22                         break;
 23                 case '-':
 24                         ret = minus(parsed.lval, parsed.rval);
 25                         break;
 26                 case '*':
 27                         ret = mul(parsed.lval, parsed.rval);
 28                         break;
 29                 case '/':
 30                         ret = divi(parsed.lval, parsed.rval);
 31                         break;
 32                 default:
 33                         printf("invalid op\n");
 34                         return 1;
 35         }
          이것도 스펙이긴 함.(+면 +한결과가 나와야 한다., -면 -인 결과가 나와햔다..)
          테스트케이스도 만들 수는 있음..
          이것도 필요해보이므로... 일단 테스트케이스 만들자!
      -위 두 항목에 대한 테스트케이스를 다 만들고나니, main함수에는 테스트안된 함수가 없음(main함수 인자체크랑 printf같은거 빼고 ㅎ)

  10단계
    TDD를 간단하게 느껴보기 위해 xUnit framework중하나인 CUnit 을 사용하여 간단한 사칙연산 수행하는 프로그램 제작수행
  
    xUnit framework를 사용했으며, CUnit을 사용
      CUnit의 xUnit framework기본개념들이 있고...  빌드해서 library로 사용하면 됨. *빌드시 
       사용법은 공식홈피 Documents참조하면 됨.(크게 어렵지는 않음)

    최대한 아래순서를 따라서 개발수행을 함(한가지에만 집중)
    testcase작성 -> test통과하는 '최소'한의 로직 구현 -> 리팩토링 을 하나의 테스트케이스별로 반복수행.

    결과물은 동일 ./step9/toy 를 참조.

    느낀점...
      처음에는 testcase작성에 대한 감이 없었으나, 하면서 어느정도 감이 익혀짐.

     TDD를 하니 확실히 아래 2가지 장점을 느낌
        프로그램이 간결해짐.(간단한 프로그램이지만 main에는 깔끔하게 단 3개의 함수만 존재함.)
        리팩토링에 자신감이 생김.(이미 테스트케이스가 있으므로 안심.) => 즉, 이로인해 좋은 코드 작성이 용이해질 것 같음.

      이 외에, 수행하면서 여러 고민들을 했으며, 다음 step진행 or 실프로젝트 적용 시에는 아래에 대한 충분한 기준이 필요해보임
        테스트케이스는 어느 수준까지?(구현상세를 테스트해서는 안 됨!, 'specification' 위주의 테스트케이스들로 구성 필요.)
          애-매한 경우는 잘 고민해서 넣거나 안넣거나.
        소스코드 디렉토리 구조(test코드, 기능코드)와 빌드 스크립트(makefile) 작성.

최종 simple pomodoro TDD
  (v)7단계 - TDD수행해서 구현 *git사용해서 commit msg잘 적으면서 하는 것도 좋을 듯. 
    Specifications.
       뽀모도로 타이머 cli판?(https://pomofocus.io/)
       1뽀모 25분 이후 5분 break
       이후 또 시작을 누르면
       1뽀모 25분 이후 5분 break
       ...반복하다가...
       4번째 뽀모가 끗나면 15분 break
       를 반복...
       +각 뽀모도로 완료마다 총 뽀모도로를 출력

      details
        (v)cli에 "start" 를 입력하면 뽀모도로 시작.
        (v)cli에 "quit" 을 입력하면 프로그램 종료.
        (v)입력 prompt는 '>' 를 출력
        (v)1pomo는 25min
        (v)1pomo 완료 시,
          (v)1break가 자동시작
            1break는 5min *매 4pomo완료 시 1break는 15min
            (v)1break종료되면 사용자입력을 대기(입력은 위와 동일"start", "quit")
           (v)현재까지 완료 pomo갯수를 출력
        (v)1pomo, 1break이 진행중이면, 화면에 남은시간을 출력.
          (v)1pomo 진행중인 경우 출력예시 : "pomo : 11:09, total:3pomo"
          (v)1break 진행중인 경우 출력예시 : "break : 4:39, total:3pomo"
         
    TESTCASES(term1) *testcase랑 제품스펙이랑 좀 구분해서 생각해야할듯. => testcase는 제품스펙 관련해서 input/output이 명확한 애들로 솎아내고... 그거 기반으로 제품코드에 추가하는거이지 않을까...라는 생각
     (v)입력가능 값은 "start", "quit" 이다.
      입력가능 상태(프로그램시작, 1pomo 종료, 1break 종료 => 즉, 상태가 NONE)인 경우 입력 프롬프트를 출력
      입력가능 상태에서,  "start" 입력하면 1pomo 가 시작(상태가 NONE -> POMO로 변경)
      입력가능 상태에서, "quit" 입력하면 프로그램 종료.
     (v)1pomo는 25분
     (v)1break는 5분.
     (v)4pomo이후 1break는 15분.
     1pomo완료되면 1break를 시작.(상태가 POMO -> BREAK로 변경)
     (v)프로그램 가능상태는 3가지(none, in 뽀모도로, in 휴식)
     (v)상태 변경은 다음과같음(NONE -> POMO -> BREAK -> NONE ...)
       state diagram : NONE ->("start") POMO ->(time ended) BREAK -> (time ended)
                         ^                
                         |________________________________________________|
                      "quit"인 경우, 프로그램종료

    TESTCASES2(term2)
      (v)input string이 "quit"이면, 종료 status가(종료 status == 0) 됨.
      (v)input string이 "start"이면, 뽀모도로 status가(뽀모도로 status == 1) 됨.
      (v)1pomo는 25분.
      (v)1break는 5분
      (v)매 4pomo마다 1break는 15분
       *프롬프트출력 / 입력행위 자체는 테스트코드를 짜기가 어려우므로 패스...
       *프로그램 구조("quit"입력전까지 게속 입력받기 위한 do ~ while문)도 테스트코드 짜기가 어려우므로 패스...
       *실제 시간이 흘렀는지(sleep(1) loop)는 테스트코드 짜기가 어려우므로 패스...

    참고. commit msg 일반적인 규칙(https://cbea.ms/git-commit/) *어디서 가져온지는 모르겟음... 시간나면 찾아보까?(8/9단계 쯤?)
Tim pope의 커밋 메시지 템플릿

Capitalized, short (50 chars or less) summary                                                         => 제목
                                                                                                      => CRLF
More detailed explanatory text, if necessary. Wrap it to about 72 characters or so. In some           => 본문
contexts, the first line is treated as the subject of an email and the rest of the text as 
the body. The blank line separating the summary from the body is critical (unless you omit 
the body entirely); tools like rebase can get confused if you run the two together.

Write your commit message in the imperative: "Fix bug" and not "Fixed bug" or "Fixes bug." 
This convention matches up with commit messages generated by commands like git merge and 
git revert.

Further paragraphs come after blank lines.

- Bullet points are okay, too

- Typically a hyphen or asterisk is used for the bullet, followed by a single space,
with blank lines in between, but conventions vary here

- Use a hanging indent

If you use an issue tracker, add a reference(s) to them at the bottom, like so:
                                                                                                      => CRLF
Resolves: #123                                                                                        => Comment

  8단계 - 7단계는 TDD형태로 러프하게 구현하였고, 7단계진행하면서 발생했던 이슈사항들은 8단계에서 정리
         *이슈1은 목적과는 크게 관련없으므로 패스(따른데 기록만..ㄱㄱ)
         *이슈2,3은 책(테스트 주도 개발, Unit Testing), googling을 통해서 나름의 답을 찾아나가 보자.!    
         *이슈4 ㄱㄱ(기능1개씩 진행 ㄱㄱ)
   (v)이슈1. TDD와 크게 관련은 없으나... main에 is_valid_input 사용할라고 샘플 작성하고있는데 Segfault나서 죽음. 확인 필요...ㅠ => 디테일은 좀 더 정리필요하지만 함수(get_input) symbol정의가 없어서 intel x86 cltq instruction(?) 이 추가로 컴파일된 것이 원인(해당 instruction에 의해 주소가 짤려서 어드레스 접근이 안됬었음!)) => 추후확인 ㄱㄱ(지식의 빈틈 목록으로 이동)

   (v)이슈2. TDD하면서 제품구현은 언제하는 거징?
      메모
       TDD에서는 어떤 코드든 작성하기 전 테스트케이스를 작성하는 것이 원칙임.
        생각해보면, 기능변경(추가/수정/제거) 시에 제품구현 + 테스트코드작성(물론 순서는 테스트코드 만들어지겠지만) 동시에하든, 나중에하든(기능별 테스트케이스 쭈르륵) 큰 상관은 없어보임. =>그랬으나,,, 좀만 더 생각해보면 근데 기능들에 대한 모 든 테스트코드들을 먼저 구현한다는 것 자체가 어떻게 될 지 모를 미래들을 예상을 하고한다는 의미이므로 먼가..먼가임(아닌 듯 함)...동시에가 맞는 듯함?
        TDD책에서도, 테스트코드작성과 실기능변경이 동시에 이루어 짐!
      결론
        동시에 수행한다고 봐야할 듯함. 이 방법으로 다시 ㄱㄱ해봐야할듯.(기존에는 기능별 작성가능한 테스트코드들을 먼저 쭈르륵 짰고, 이로인해 아구도 잘 안맞는 부분이 있었다고 느꼈음.)

    (v)이슈3. 테스트케이스 도출을 잘하고있는지 모르겠음...! testcase랑 제품스펙이랑 좀 구분해서 생각해야할듯. 
      메모
       testcase는 제품스펙 관련해서 input/output이 명확한 애들로 솎아내고... 그거 기반으로 제품코드에 추가하는거이지 않을까...라는 생각
        아마, 7단계할때, 기능에대한 테스트케이스를 먼저 작성한 게 패착인 듯함. 기능1개씩 진행(with 테스트코드)로 하는 것으로 해야할 듯.
      결론
        기능1개씩 진행(with 테스트코드)하는 방향으로 한번해보면 답이 나올 듯함.

    (v)이슈4. 개선(구조개선 등등,, 리팩토링포함)
      메모
        이슈2,3 답을 찾으면 기반으로 한 번 더 ㄱㄱ하던가! 
        현재내린 답은, 기능의 테스트코드들을 먼저 작성한 것이 잘못된 방법으로 생각되서, 기능1개씩 진행하는 방법으로 다시 ㄱㄱ(term2 dicretory)
       
      결론
       term2 완료.
        테스트케이스를 처음부터 모두 짜고 프로그램 개발은 부자연스러움.(아마도, 어떻게 사용될지 모를 함수를 미래를 예측하고 선개발하는 느낌이라 그럴 듯, 똑같은 걸 한번 더 해서 그런진 모르겠으나 느낌상 코드도 보기 더 쉬워보임.)
       
        일부 테스트케이스들은 도저히 어떻게 짜야할 지 감이오지않음. => 다른 소스보면서 배워야할 듯...
          *프롬프트출력 / 입력행위 자체는 테스트코드를 짜기가 어려우므로 패스...
          *프로그램 구조("quit"입력전까지 게속 입력받기 위한 do ~ while문)도 테스트코드 짜기가 어려우므로 패스...
          *실제 시간이 흘렀는지(sleep(1) loop)는 테스트코드 짜기가 어려우므로 패스...
          *사용자에게 출력하는 정보
        
  9단계
    아래 내용에 대한 답을 좀 더 찾아보자(오픈소스같은 거 보면 도움되지 않을까 싶음)
    테스트작성+기능구현 동시에 하는 것이 맞을지? => 맞음. application은 점진적으로 개발 됨.
    테스트케이스 수준? => 가이드정도는 있으나,,, 해보면서 경험으로 얻어야할 듯.
    내가 작성하지 못한 테스트 작성방법은? => 못찾겠다... 해보면서 경험으로...
    
    참고자료
      https://github.com/topics/test-driven-development
      https://github.com/quii/learn-go-with-tests => 요거가 좋을듯(Go기반이긴한데... 적당히 잘... 보면서 결론내리면 될 듯함)

 10단계 - 정리(과제종료 리포트 마냥)
  TDD 공부 목표였으며, 아래의 배경 / 목표로 진행하였음
  +책에 나온 10단계 학습법에 기반을 두고 진행함
  학습이유(배경)
    실프로젝트 적용하면 많은 도움(TDD를 함으로써 얻는 이점들.. 테스트코드작성, 좋은 코드구조?...)이 될 듯 하고,
    실프로젝트 적용을 해보고싶음.
    최근 프로젝트들은 테스트코드 없지않아보임. 안하면 뒤쳐지는 듯.
    등등?
  학습목표(목표)
    간단한 프로젝트에 TDD 실적용하기.(make를 통한 빌드 시, 테스트코드 실행하고, 성공시 빌드성공하여 아웃풋, 테스트실패면 실패)
    간단한 프로젝트 주제 : 뽀모도로 타이머 cli판?(https://pomofocus.io/)

  결과
    진행 히스토리 정리
      step0. 10단계 학습을 위한 계획/목표 정의함
        한일목록
          아래 step1~step3에 대한 10단계학습 계획/목표 정의함.
        코멘트
         확실히 목표를 명확하게 정의하니 샛길로 빠지지는 않는 듯. 다른 것에도 적용해봄직할 듯함.(뽀모도로 기법도 그렇고...)

      step1. TDD 이론에 대한 정리 진행(7-10단계 반복)
        한일목록
         위키피디아 및 TDD책으로 TDD의 제일 주요한 내용만 정리
         기타 상세한 내용들은 모두 skip(기본적인 것 먼저 챙기기 위함. + 모든걸 하려면 시간 부족함.)
        코멘트
         N/A
         
      step2. 진짜 간단하게 TDD 수행(7-10단계 반복)
        한일목록
        xUnit framework 개요 확인.
        CUnit framework 확인.
         두 숫자 입력받아 사칙연산 하는 프로그램 TDD수행.
        코멘트
        TDD수행을 잘못수행하였음(테스트코드 주르륵 짜놓고, 해당 내용을 한번에 어플리케이션으로 반영). But 크게 이질감은 없었음(너무 간단해서 자연스럽게 어플리케이션으로 반영되었던 것 같음)
         확실히 코드 수정(리팩토링)의 두려움은 느껴지지 않았던 것 같음.(너무오래되서 요정도 느낌정도만...)
    
      step3. 최종목표인 간단 프로젝트 TDD 수행(7-10단계 반복)
        한일목록
         2가지 방법으로 TDD를 수행함(하나는 테스트코드 전부짜고 어플리케이션 반영, 그 다음에는 테스트코드작성->어플 반영 사이클로 진행) 결과물이 2개 발생함.
         *참고로, 스펙은 되게 단순하게 하였음(최초 목표보다는 좀 후지게 만듦 ㅎ)
        
        코멘트
        TDD는 점진적으로 어플리케이션에 반영하는 것이 모든 테스트 작성후 한번에 반영하는 것보다 더 자연스러웠음(즉, 구현도 편했고, 구조도 더 깔끔, 한 번더 수행해서 그런건지는 모르겠지만)
         테스트케이스의 정도 및 작성하지 못한 케이스(도무지 방법이 생각이 나지않음)가 있었는데 이건 단시간으로는 터득어려울 듯 하고 경험의 영역인 듯...

    알게된것 목록
      TDD 주요개념
      CUnit(TDD framework for C)
       기본적인 TDD 수행방법

    코멘트
      꽤 많이 이것저것 들쑤셔본 듯 하지만, 아직 완전 초보적인 수준으로 느껴짐... 업무적용은 좀 힘들어보이긴 함.
      다양한 주제들로 먼가 연습을 마니 해야할 듯함.(책 다른사람 소스 같은것도 같이 참조하면서)
      그리고 10단계 학습법도 괜찮은 학습방법인듯, 술먹는다고 하는둥마는둥해서 오래걸리긴 했고, 퀄리티는 낮을진 모르겠지만 어쨋든 마무리가 되긴 하엿음.

