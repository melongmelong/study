next : 완료
*1-10단계학습법 적용
*참고.
  1-6단계, 목표, 계획, 학습데이터 모으는 단계
  7단계(대충 사용 수준까지)
  8단계(이것저것해보기)
  9단계(유용한 것을 할수있는 수준까지 파기)
  10단계(가르치기)

주제 : CI/CD, jenkins
학습이유
  CI/CD 기본개념 장착 + 관련 tool 사용법 익히기

학습목표
  CI/CD 기본개념 장착.
  jenkins(CI/CD tool) 로 프로젝트(아마도 TDD가될듯)에 대한 CI/CD 환경 구성
    
학습자료
  wikipedia
  googling
  jenkins official documents

학습계획
  milestone1. CI/CD기본개념 장착 + jenkins로 프로젝트에 대한 CI/CD 환경 구성
  
=======================
7단계 *목표 : CI/CD기본개념 + jenkins 환경install.
  CI(Continuous Intergration)
    정의 : 하루에 여러번 mainline(ex. trunk branch)에 개발자들의 작업사항을 머지하는 행위.
    목적 : 개별개발자의 baseline과 repository의 차이를 줄이자.! => local repo와, main repo의 차이를 줄이자!
           하지않으면? 머지하는데 시간이(형상이 많이 틀어지게되므로) 더 중요한 작업(feature개발)시간보다 더 많이 들게 됨.
    CI를 위한 주요 요소/관습들
      code repository 유지
      automated build
      automated test
       등등...
       *코드 merge하는 선에서 그치는 것이 아니라, checkin된 코드에 대한 검증(feat. test)까지 포함되어야 함.
    장점
      빠른 버그 발견
      빠른 프로젝트 이슈 발견(Avoids last-minute chaos at release dates라고하는데 나는 이것을.. 이렇게 이해할래.)
      빈번하게 작업되므로, 모듈화되고 덜복잡한 코드가 checkin됨
      등등...
    단점
      환경구축이 필요하다.
     small, untestable legacy프로젝트에는 부적합할 수 있음.
      등등...

  CD(Continuous Delivery)
    정의 : SW를 production(like)환경에서 자동으로 짧은 cycle로 생산하는 SW approach
           *생산된 SW수준은 언제든 릴리즈될 수 있는 수준이어야 함.
          
    목적 : 점진적인 SW update를 가능하게 하여 비용,시간,리스크를 줄이는 데 도움됨.

   CD를 위한 주요 요소/관습들
     *deployment pipeline
     visibility : 협업을 위해 모든 팀원에게 CD시스템의 모든 측면이 공유되어야 함.
     feedback : 문제가 발생했을 때 가능한 빠르게 해결할 수 있도록 인지할 수 있어야 함.
     continually deploy : CD를 통해 SW를 deploy할 수 있어야 함.
 
    장점
      생산성/효율성 향상
      품질향상
      등등
      *아마도, 기능 1-2개정도만 짧은 cycle 점진적으로 배포 가능(적합한 체계(feat 자동화)없다면 불가할것이고.)하게 됨으로써 이로 인해 리스크도 줄고, 생산성/효율성/품질 향상이 된다는 의미로 해석해도 될 듯.

    단점
      고객의 상황(ex. 잦은업데이트를 싫어함), 도메인(ex. on-site테스트가 필요한 케이스(ex. medical, 중공업 등))에 따라 CD가 불가할/어려울 수 있음
      등등

  jenkins
     정의 : automation server임.
          SW development와 관련된 부분(ex. building, testing, deploying)들에 대한 자동화를 지원함.
          => CI / CD를 가능하게 함!


    jenkins 공식 tutorial guide.(https://www.jenkins.io/doc/pipeline/tour/getting-started/)
      install 및 실행방법
         요약하면, java runtime설치하고(jenkins prerequisite참조)
        jenkins war 파일 내려받아서 war 실행하면 됨.
        https://www.jenkins.io/doc/pipeline/tour/getting-started/ 참조

         최초계정은 admin / ec63ae17f2ba455094da9f0f8398359c 로 로그인
        *pw는 /home/knw/.jenkins/secrets/initialAdminPassword 에서도 확인 가능

         참고. jenkins관련 파일들은 /home/knw/.jenkins 하위에 존재하는 것으로 보임.

      pipeline생성
        jenkins pipeline : CD pipeline 구현을 지원하는 plugin들의 모음.
        CD pipeline : VCS로부터 SW를 생성해서 고객에게 전달하는 자동화된 절차로 볼 수 있음.

         이슈
        *local repo checkout을 위해서는 Dhudson.plugins.git.GitSCM.ALLOW_LOCAL_CHECKOUT=true 옵션을 주고 jenkins실행필요
          java -Dhudson.plugins.git.GitSCM.ALLOW_LOCAL_CHECKOUT=true -jar jenkins.war --httpPort=8080

        *docker가 없음.
          다른형태로 진행 => Jenkinsfile의 agent를 any 변경.(tutorial_repo/Jenkinsfile 참조)

       Running multiple steps
         step :  pipeline을 구성하는 요소로 볼수 있으며, build, test, deploy를 제공함.
                    하나의 action을 수행하는 command로 생각해볼 수 있음.
                    현재step이 성공해야 다음step이 실행될 수 있음.

         Jenkinsfile(Delcarative Pipeline)에 'steps' 로 step들을 정의함.

           다른 step을 wrap하는 step이있음. ex, retry / timeout
              
         pipeline의 결과별 action을 정의할 수 있음 'post'

       Defining execution environments
         'agent' : Jenkins에게 어디에서/어떻게 Pipeline을 실행할지에 대해 알려주는 directive
         jenkins에서는 'agent' 처리시 다음 2작업이 일어남.
           'agent' sub-block에 포함된 모든 step을 jenkins가 실행하도록 queueing.(이후 특정 시점(by executor?)에 실행됨!)
           workspace(ex. 소스를 checkout 받는 위치.)가 할당됨.

          단순하게, jenkins가 agent환경기반으로, stage/step을 실행한다고 볼 수 있음.

        Using environment variables
          jenkinsfile에 환경변수를 정의('environment' directive)할 수 있음.(global scopee or per stage scope)
          jenkins의 각 plugin에서도 직접 정의한 환경변수를 사용할 수도 있음.

        Recording tests and artifacts
          jenkins는 test결과, artifiact(*pipeline동안 생성된 파일들.) 를 기록할 수 있음(ex. 'junit', 'archiveArtifacts' directive ...)

        Cleaning up and notifications
          pipeline결과에 따라 action을 정의할 수 있음('post' directiry)
          workspace clear(deleteDir()), mail, hipchatSend directive 등등... 이 가능!

        Deployment
           특별한건 아니고.. jenkins에서의 기본적인 CD pipeline은 3가지 stage로 구성되어있다... 가 주요내용인듯.
          Build - Test - Deploy

        Comment
          정리하면,,, jenkins pipeline 기본 사용 방법임.
         'pipeline', 'agent', 'stages', 'stage', 'steps/step' 외 다양한 directive(w/provided by plugin) 들로,
         CI/CD 환경 구축을 할 수 있다.

8단계 *목표 : jenkins이것저것(주요기능체험수준) + 7단계 개념적으로 불명확했던 내용 추가정리(optional)
  CI vs CD 가 뭔지... 확인필요
     쉽게...
    CI : 코드 merge에 관한(어떻게 잘(효율적으로, 덜 리스키하게 등) merge를 할거냐) 것 *merge에서만 그치는 것이아니라 checkin된 코드 검증도 포함(feat. test).
        코드 머지 ~ 빌드 ~ 테스트까지의 과정과 관련 *상세 step은 조직마다 다소 차이있을 수 있음
    CD : SW배포에 관한(어떻게 잘(효율적으로, 덜 리스키하게 등) 배포를 할거냐) 것 *배포되는 SW수준은 고객이 사용가능한 수준임.(not for QA)
        패키징 ~ 테스트(QA) ~ 배포까지의 과정과 관련 *상세 step은 조직마다 다소 차이있을 수 있음
     으로볼 수 있음.

    참고.
     https://www.browserstack.com/guide/difference-between-continuous-integration-and-continuous-delivery 참조
     https://www.atlassian.com/continuous-delivery/principles/continuous-integration-vs-delivery-vs-deployment

  jenkins관련
     7단계의 jenkins tutorial guide는 multi-branch pipeline의 경우이고,
      jenkins project type이 Freestyle이면, JenkinsFile 불필요, 직접 실행할 shell script 를 작성하는 형태임.
       필요에 따라 적합한 project type을 쓰면 될 듯함.

     7단계에서 작성한 Jenkinsfile은, jenkins에서 사용하는 Pipeline domain-specific language(DSL) 임.! 
       즉, jenkins project Freestyle-type의 경우는 해당 Pipeline DSL를 사용하지 않아도 됨.  
    
9단계 *목표 : jenkins로 TDD prj 연동해서 빌드/산출물생성/빌드실패시 노티 for jenkins tutorial...
  연동스펙
    repository : TDD prj 코드(from git local repository)
    산출물 : TDD prj 산출물(프로그램바이너리, 테스트용바이너리, CUnit라이브러리)
    빌드 trigger : push되었을때마다. => local git 에 대해서는 트리거가 없는 듯... skip...
    빌드성공/실패 시 notification (by email) => 네이버/gmail등은 먼가 다른 환경설정이 필요해므로 포기...(skip)

  아래 2가지 방법으로 동일한 환경 구성 진행
    step-Freestyle (using Freestyle prj)
    step-Pipeline (using Multibranch Pipeline prj)

  참고. jenkins profile(config) 백업방법
    jenkins home directory (JENKINS_HOME 환경변수로 세팅됨) 자체를 백업해둔 후, 추후에 다시 jenkins home directory그대로 copy하면 됨.
    ex) JENKINS_HOME이 /home/knw/.jenkins 인 경우
    백업 : cp -rfp /home/knw/.jenkins path/to/backup
    복원 : cp -rfp path/to/backup /home/knw/.jenkins  

10단계 *목표 : 정리
결과
  CI/CD 기본 개념 학습
  CI/CD를 위한 자동화툴(jenkins) 기본 사용법 학습 및 실제 Jenkins를 활용한 빌드 수행을 실습하였음.

알게된 것
  CI란?
    Continuous Intergration 지속적 통합
     => 간단하게 말하면, 소스코드 머지를 효율적으로 하기 위한 절차를 의미
     
  CD란?
    Continuous Delivery
     => 간단하게 말하면, 패키징~테스트~배포와 관련된 절차

  Jenkins란?
    CI/CD 자동화 툴.
     각종 플러그인으로 다양한 기능들을 지원.
    Pipeline domain-specific language를 제공하여, VCS에서 빌드과정을 직접 관리할 수 있음.
    Jenkins기본사용법을 알 수 있었음.

코멘트
  용어만 알고있던 CI/CD와 Jenkins에 대해 피부로 느낄 수 있는 좋은 기회였다고 생각함.
  아직 초보적인 수준이지만, CI/CD환경구성이 필요하다 라고 하였을 때, CI/CD개념 및 Jenkins사용법 기반으로 
  어떻게 할 것인가에 대해 고민은 해볼 수준은 되었다고 생각됨.


