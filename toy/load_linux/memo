-next할거
  milestone3

-milestone1. reset vector 코드실행(완료)
qemu의 경우 64k boundary size로 rom img(bios)가 아니면 실행되지 않음.(qemu코드 참조)
  아닐경우 qemu: could not load PC BIOS 이슈 발생.
  qemu만의 문제인 지는 확인필요하긴 해보임.
실제 실행시키기 위해서는 qemu에서 사용하는 bios img는 256k로해야하나봄.
  왜이런지는 봐야할듯, 아마 qemu 스펙?일지도?(https://martin.uy/blog/bios-execution-in-qemu-where-it-all-starts/ 참조.)

reset addr에 간단한 instruction입력후 레지스터 값 변경 및 system hlt상태 확인됨.(qemu monitor, info cpu, info registers 로 확인)

-milestone2. 여러개의 소스파일로 구성된 rom이미지 생성
  빌드스크립트(Makefile, linker script) 제작이 필요할 듯.
  변수할당 / call / jmp 사용.
  C source file 링크하면 objcopy나.. 이런것들이 먼가 잘 안됨. 확인필요해보임.
    .text.__x86.get_pc_thunk.ax section 문제로 확인 됨
    gcc compile 시, -fno-pic 옵션주니 위 section없이 컴파일됨...
    pic 관련 내용으로 확인 됨.(https://stackoverflow.com/questions/50105581/how-do-i-get-rid-of-call-x86-get-pc-thunk-ax)
  reset.S -> start.S로 jmp안되는 이슈
    첫번째로, real address mode인 경우 jmp범위 고려가 필요해보임.(기억으로는 범위가 있음(64k?))
    두번째로, 버그가 있나봄. 다음과 같은 코드로 처리필요함(왜인지는 모르겠지만, coreboot reset16.inc 코드 참조함)
      5 .byte 0xe9
      6 .int _start - (. + 2); #from coreboot reset16.inc...
      *이건 이렇게 안해도 잘 됨.
  start.S -> main.c로 call
    call main 명령어로 이슈없이 됨.(real address mode jmp범위 고려되었을 경우일 듯함.)
  reset.S ~ main.c까지 동작 확인됨.(qemu monitor, info registers의 흐름별 소스파일에서 세팅하는 레지스터 값으로 확인)

-miestone3. kernel load(?)
  rom에 커널이미지,initrd 올리고 해당이미지 load.
  수행해야 할 작업 목록..
  (v)1. 16bit -> 32bit protected mode 전환(gdt설정, idt설정, segement register 설정..., paging enable? disable?)
    x86 architecture manual에 초기화방법 나와있음.(vol3. chapter 9)
    gdt load 및 protected mode jmp하는 거 그냥 막 하면 안되는 듯 해서 coreboot코드 그대로 가져옴. 의미는 잘 모르겠음;(이렇게 안해도 잘 됨..)
  (v)2. rom img에 kernel, initramfs, cmdline 등 포함
    binary file을 다른 소스파일과 link하기 위해 object file생성 방법.(https://codeplea.com/embedding-files-in-c-programs)
      1. xxd -i [infile] 을 직접구현.
      2. xxd -i [infile] (1과 동일)
      3. ld -r -b binary -o some_file.o some_file.jpg 로 object file생성.
  3. kernel boot protocol에 맞게 관련 코드 추가.
    16bit 전환필요한가?(coreboot은 32bit에서 걍 jmp하는 듯)
     가상머신 memsize 4g이고 rom영역도아닌데 데이터 copy시 특정 메모리영역에는 copy가 안됨.
  4. kernel booting 확인
    

  main() function call 및 bios데이터 memory copy 후 처리하는 것까진 됨.
    qemu pmemsave addr size file cmd로 memory dump가능.
    
  *x86의 경우, instruction 최초 실행 시에는, real address mode의 실제 일반적인 addressing rule이 아닌 다른 rule사용.(x86 cpu manual 9.1.4 section참조)
  *rom img의 경우 4GB 바로 밑 address space에 존재. (x86 case)
  *[kernel]/[src]/[dir]/x86/boot.rst 참조(x86 kernel boot protocol)
-참고
  qemu띄울때 -monitor stdio 옵션지정하면 terminal로 qemu상태확인가능함.(qemu정상동작할경우만)
  qemu monitor에서 info cpu, info registers로 상태 확인 가능

-추가확인필요사항(optional)
  gnu asx86 asm 관련내용
    x86 asm addressing mode(어떤게 relative하게처리되고 어떤게 absolute하게 처리되는 지)
    x86 section directive
    x86 instruction 문법리스트 확인
    
    gas에서 label은 .section + offset 정보임.
    모든 label은 link과정에서 relocated 됨.(nm cmd로 확인가능) link 후 label값은 직접 assgin하지 않은 이상은, 해당 이미지 내에서의 absolute address임.(pic등 생각안했을 경우)
    동일 global symbol(label)(x86의 경우, .global [symbol name])이 2개이상인 경우 링크에러나며, 1개이하인 경우에는 링크에러 나지 않음.
    branch instruction(jmp, call)에서 사용되는 jmp 종류(near, short, far, etc...)는 gas가 알아서 선택하는 듯(?). *x86 case(https://stackoverflow.com/questions/34911142/why-is-the-start-small-algorithm-for-branch-displacement-not-optimal)
    *gas document 참조
