-next할거
  milestone3

-milestone1. reset vector 코드실행(완료)
qemu의 경우 64k boundary size로 rom img(bios)가 아니면 실행되지 않음.(qemu코드 참조)
  아닐경우 qemu: could not load PC BIOS 이슈 발생.
  qemu만의 문제인 지는 확인필요하긴 해보임.
실제 실행시키기 위해서는 qemu에서 사용하는 bios img는 256k로해야하나봄.
  왜이런지는 봐야할듯, 아마 qemu 스펙?일지도?(https://martin.uy/blog/bios-execution-in-qemu-where-it-all-starts/ 참조.)

reset addr에 간단한 instruction입력후 레지스터 값 변경 및 system hlt상태 확인됨.(qemu monitor, info cpu, info registers 로 확인)

-milestone2. 여러개의 소스파일로 구성된 rom이미지 생성
  빌드스크립트(Makefile, linker script) 제작이 필요할 듯.
  변수할당 / call / jmp 사용.
  C source file 링크하면 objcopy나.. 이런것들이 먼가 잘 안됨. 확인필요해보임.
    .text.__x86.get_pc_thunk.ax section 문제로 확인 됨
    gcc compile 시, -fno-pic 옵션주니 위 section없이 컴파일됨...
    pic 관련 내용으로 확인 됨.(https://stackoverflow.com/questions/50105581/how-do-i-get-rid-of-call-x86-get-pc-thunk-ax)
  reset.S -> start.S로 jmp안되는 이슈
    첫번째로, real address mode인 경우 jmp범위 고려가 필요해보임.(기억으로는 범위가 있음(64k?))
    두번째로, 버그가 있나봄. 다음과 같은 코드로 처리필요함(왜인지는 모르겠지만, coreboot reset16.inc 코드 참조함)
      5 .byte 0xe9
      6 .int _start - (. + 2); #from coreboot reset16.inc...
      *이건 이렇게 안해도 잘 됨.
  start.S -> main.c로 call
    call main 명령어로 이슈없이 됨.(real address mode jmp범위 고려되었을 경우일 듯함.)
  reset.S ~ main.c까지 동작 확인됨.(qemu monitor, info registers의 흐름별 소스파일에서 세팅하는 레지스터 값으로 확인)

-miestone3. kernel load(?)
  rom에 커널이미지,initrd 올리고 해당이미지 load.
  수행해야 할 작업 목록..
  (v)1. 16bit -> 32bit protected mode 전환(gdt설정, idt설정, segement register 설정..., paging enable? disable?)
    x86 architecture manual에 초기화방법 나와있음.(vol3. chapter 9)
    gdt load 및 protected mode jmp하는 거 그냥 막 하면 안되는 듯 해서 coreboot코드 그대로 가져옴. 의미는 잘 모르겠음;(이렇게 안해도 잘 됨..)
  (v)2. rom img에 kernel, initramfs, cmdline 등 포함
    binary file을 다른 소스파일과 link하기 위해 object file생성 방법.(https://codeplea.com/embedding-files-in-c-programs)
      1. xxd -i [infile] 을 직접구현.
      2. xxd -i [infile] (1과 동일)
      3. ld -r -b binary -o some_file.o some_file.jpg 로 object file생성.
  3. kernel boot protocol에 맞게 관련 코드 추가.
    16bit 전환필요한가?(coreboot은 32bit에서 걍 jmp하는 듯) => coreboot은 32bit protocol사용해서 굳이 16bit는 불필요함.
     가상머신 memsize 4g이고 rom영역도아닌데 데이터 copy시 특정 메모리영역에는 copy가 안됨.(???) => 필요없음
  4. kernel booting 확인
    32bit jmp하는 걸로 대충하고 했는데 안 됨... 원인 / 프로토콜 등 확인 필요함.
     우선 16bit 가 젤 명확하니 16bit로 도전...???..(차라리 32bit로 하는 게 나을지도) => 32bit실패했음. 16bit로해봐야할듯. 해야할것들
     ㅜㅜ
       16bit memory segment에서 동작하는 16bit linux boot code 구현
       32bit code -> 16bit로 전환 및 16bit linux boot code로 jmp
       Documentation/x86/boot.rst참조하여 16bit boot 프로토콜 구현
          이미지 로딩, 
         parameter 세팅, 
         cmdline세팅, 
         jmp to kernel entry point
    
  main() function call 및 bios데이터 memory copy 후 처리하는 것까진 됨.
    qemu pmemsave addr size file cmd로 memory dump가능.

  커널코드 실행은 되는데(32bit로 진입후, 64bit mode로 변경된 거 확인(info register cmd)) qemu화면에서도 안보이고 어느시점에서 rip값 변경없음.
    kernel code vmlinux(boot, compressed코드말고, 메인코드이미지) 확인시에는 delay_tsc 와 관련있는 것으로 보임.
    코드 실행시 jmp *(PARAM_START+0x214)로 하면 되는데, movl PARAM_START+0x214, %eax후 jmpl *(%eax)하면 안됨. -> jmpl %eax하면 됨. 메모리오퍼랜드 참조하는 '()' 관련인 듯..

  16bit 시도했는데 전환이 잘 안 됨... 16bit전환까지는 됬는데 이후 instruction들 실행이 비정상...ㅜ
    https://www.sudleyplace.com/pmtorm.html 참고해보고 재시도 해봐야할 듯...
     헐... 어셈블리 막 쓰면 안되고 지원되는 것만 써야하나봄
      movw $0x00, %ax 같은 명령어는 real mode에서 지원안해서 안되는 거였음...(movl $0x00, %eax는 가능...). x86 매뉴얼참조. 
         아님, 다시봐야함... 16bit 넘어갈때 잘못넘어가서 그런것으로 확인 됨...(.code32, .code16 directive에 따라 어셈블되는 instruction이 차이가 있음(ex. opcode에 prefix 가 없다거나 그럼..). 16bit cmd실행해야하는 곳에는 .code16해주니 잘 됨...) 
         즉, 어셈블되는 코드가 16bit인지, 32bit인지 고려필요하며, segment descriptor도 16bit인지 32bit인지 중요... 
        real mode 전환 시 16bit segment descript로 전환하는 step 필요해보임
     어쨋든 했는데 안 됨...ㅜ 커널로 넘어갔으나, die label에서 hlt당한듯
     console도 안나오고.. 하여간 좀 그럼...
     문제지점은 다음과 같음
         main()
           set_bios_mode()
             intcall()
               int instruction! => 이때 사용할 인터럽트가 설정된 게 없음... 16bit booting은 힘들듯(bios call다 구현해야할 듯함;) coreboot은 어케 부팅하는 지 함 더 봐야할 듯.
     coreboot linux booting
       32bit boot protocol사용하므로, linux kernel의 header.S 코드는 실행하지 않고, 바로 32bit 진입코드 실행함.
    
  32bit로 다시 시도해야할 듯함. 32bit로 실행하는 경우, bioscall은 필요없는 것으로 보여짐...; 
     했는데 여전히 실패함.(kernel실행해서 64bit 코드는 실행되지만, delay_tsc()수행중 pause되는 듯) 좀 더 검토 필요해보임.
    coreboot에서 설정하는 linux parameter들
      *x86 boot protocol명시된것처럼 linux parameter는 모두 0으로 세팅 후 설정함.
       *아래 이름은 coreboot에서 사용하는 linux_params의 필드이름
      * *runtime은 커널로드시 설정, 이 외는 coreboot rom img생성 시 설정.
      mount_root_rdonly,
      orig_root_dev
      init_size,
      orig_video_mode
      orig_video_cols
      orig_video_lines
      orig_video_isVGA
      orig_video_points
      loader_type
      cmd_line_ptr
      relocatable_kernel
      kernel_alignment
      kernel_start
      initrd_start
      initrd_size
      e820_map_nr *runtime
      e820_map    *runtime
       => 나머지는 copy&paste하거나 boot protocol보면 될 듯한데 e820이 문제인듯함.
      => e820 정보의 경우, coreboot runtime시, 실제 hw정보를 읽어와서 해당 정보를 coreboot table형태로 기록됨. (bs_write_tables(), bootmem_write_memory_table() 해당 함수 확인해봐야할 듯.)
      아래는 coreboot실행시, e820 coreboot table정보(e820관련해서는 RAM, RESERVED type만 사용하는 듯함.)
Writing coreboot table at 0xbffa7000
 0. 0000000000000000-0000000000000fff: CONFIGURATION TABLES
 1. 0000000000001000-000000000009ffff: RAM
 2. 00000000000a0000-00000000000fffff: RESERVED
 3. 0000000000100000-00000000bff80fff: RAM
 4. 00000000bff81000-00000000bffaffff: CONFIGURATION TABLES
 5. 00000000bffb0000-00000000bffd2fff: RAMSTAGE
 6. 00000000bffd3000-00000000bfffffff: CONFIGURATION TABLES
 7. 00000000ff800000-00000000ffffffff: RESERVED
 8. 0000000100000000-000000013fffffff: RAM

    linux kernel arch/x86/boot/main.c main() function에 parameter설정하는 코드들임... 참조필요할 듯.

  *x86의 경우, instruction 최초 실행 시에는, real address mode의 실제 일반적인 addressing rule이 아닌 다른 rule사용.(x86 cpu manual 9.1.4 section참조)
  *rom img의 경우 4GB 바로 밑 address space에 존재. (x86 case)
  *[kernel]/[src]/[dir]/x86/boot.rst 참조(x86 kernel boot protocol)
-참고
  qemu띄울때 -monitor stdio 옵션지정하면 terminal로 qemu상태확인가능함.(qemu정상동작할경우만)
  qemu monitor에서 info cpu, info registers로 상태 확인 가능

-추가확인필요사항(optional)
  gnu asx86 asm 관련내용
    x86 asm addressing mode(어떤게 relative하게처리되고 어떤게 absolute하게 처리되는 지)
    x86 section directive
    x86 instruction 문법리스트 확인
    
    gas에서 label은 .section + offset 정보임.
    모든 label은 link과정에서 relocated 됨.(nm cmd로 확인가능) link 후 label값은 직접 assgin하지 않은 이상은, 해당 이미지 내에서의 absolute address임.(pic등 생각안했을 경우)
    동일 global symbol(label)(x86의 경우, .global [symbol name])이 2개이상인 경우 링크에러나며, 1개이하인 경우에는 링크에러 나지 않음.
    branch instruction(jmp, call)에서 사용되는 jmp 종류(near, short, far, etc...)는 gas가 알아서 선택하는 듯(?). *x86 case(https://stackoverflow.com/questions/34911142/why-is-the-start-small-algorithm-for-branch-displacement-not-optimal)
    *gas document 참조
