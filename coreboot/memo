memo
다음에할거 : 대강 큰 흐름은 다본듯함. tutorial qemu기반 실행도 해봄.(잘됨).
          LinuxBoot coreboot에서 빌드하는 과정다봄. 실행도 해봄.
          payload가 CBFS에 추가되고, 어떻게 load되는 지 큰 흐름 분석완료함.
          LinuxBoot payload 부팅하는 거 분석.(coreboot->linux kernel연관은 어느정도 확인 되었음. 바로 구현프로젝트 넘어갈까??.. coreboot header, linux kernel boot interface위주로 확인 필요함. linux_trampoline.c 의 trampoline코드가 entry point임. 좀 더 자세히 보면 될 듯.(linux_trampoline.c는 linux_trampoline.S로부터 생성됨. Makefile참조) 이후는 linux랑 동일한 과정 거칠것임)
          qemu기반으로 coreboot으로 payload(LinuxBoot)띄우는 실습하면서, coreboot 상세히 봐야할 부분 및 커널부팅과정(review수준) 보면 될 듯함.
          *LinuxBoot는 일반적인 linux kernel은 아니고, 또다른 OS부팅을 위한 linux kernel로 생각하면 됨.(LinuxBoot자체로도 필요기능이 있다면 해당 커널을 그대로 사용해돋 되긴하겠지만, rom size제약 땜시 그렇게 하지는 않을 듯함.)
          *LinuxBoot도 어쨋든 linux kernel 이므로, 띄워보면서 linux kernel booting확인해보면 좋을 듯 함. 
           *이거보고나서 맨땅헤딩으로 qemu기반 bios ~ kernel부팅까지.(정 어려우면 간단한 os kernel같은거라도... 띄워보던가...)
          make printall, make filelist, cbfstool cmd를 사용해서 coreboot 동작소스 분석.(bootblock 초기코드 먼저 ㄱㄱ)
          overview에 따라 동작하는 지 review(진도빼면서 그때그때 필요할때마다 확인해보면 될 듯함, 필요한 코드위주로 보면서 하면 될 듯)
               실제 동작시켜보면서 debugging..
             Makefile, code내 불명확한 부분 재확인..
         
참고
  https://mug896.github.io/make-script/
  
bootblock, romstage, postcar, ramstage, payload build과정(포함되는 코드/이미지생성방법 등)  및 각 stage별 흐름 위주로 확인.

------------------------------------------------------------------------------------------------
coreboot procedure overview
bootblock -> romstage -> postcar -> ramstage -> payload 와 같은 순서로 실행.
  bootblock을 제외한 각 stage들은 CBFS format인 ROM을 파싱하여 부팅.(bootblock도 CBFS 포맷으로 rom에 상주하긴 함.)

make printall을 통해서 각 stage별 포함된 코드 확인가능함.

payload는 별도로 빌드함(ex. SeaBIOS(default payload)의 경우 git으로부터 clone해서 빌드해가지고 CBFS rom에 추가)
-------------------------------------------------------------------------------------------------
coreboot build overview
각 stage(bootblock, romstage, ramstage, postcar, payload ...)를 CONFIG에 따라서 빌드.
각 stage는 CBFS format인 coreboot.rom ROM 이미지에 포함됨.
  coreboot.rom은 CBFS format을 가짐.

coreboot Makefile

kconfig설정에 따라서 컴파일 할 파일들이 결정됨(ex. bootblock-y += ...)
all 로부터 시작해서 컴파일 할 파일들을 컴파일 / 링크함.
과정중 빌드에 필요한 tool, file 등도 같이 생성함.

-$(top)/Makefile : 
real-all, evaluate_subdirs, includemakefiles 이 주요 항목

124
  $(srck)(util/kconfig)/Makefile.inc 를 include.

199
  real-all: real-target
  실제 빌드 시작하는 make rule
  특정 조건이 만족되지 않으면 해당 룰이 아닌 다른 real-all rule이 실행 됨.(NOCOMPILE variable 참조)
  real-target rule은 include된 makefile에 존재.

205-206
  $(obj)/config.h build하는 rule존재
  make oldconfig를 수행함.

218-221
  add-class [arg] 
     아래 Make variable을 추가
    [arg]-srcs:=
    [arg]-objs:=
    classes+=[arg]

228-230
   add-special-class [arg1] [arg2]
     아래 Make variable을 추가
     [arg1]:=
     speical-classes+=[arg1]

237-246
  src-to-obj [arg1] [arg2]
    
265-276
  includemakefiles 정의
  기본적으로는 인자로 넘어온 디렉토리의 Makefile.inc 를 include 및 add-class, *-handler(special handler) call 및 *-srcs, subdirs variable 값 설정 수행
  subdirs
    inlcude한 Makefile로부터 설정된 subdirs-y variable 값으로 설정됨.

280-286
   evaludate_subdirs 정의
   subdirs variable 값으로부터 각 directory를 가져온후 includemakefiles를 호출
   TOPLEVEL directory 부터 includemakefiles을 호출함
   subdirs variable은 includemakefiles에서 재설정 됨.

291-297
  UNIT_TEST variable에 따라 evaluate_subdirs call하거나 tests/Makefile.inc를 include

  evaluate_subdirs를 호출, includemakefiles를 호출하여 subdir에있는 Makefile.inc 를 include하고, rule을생성함.

  includemakefiles
    *-y make variable 초기화
    include another Makefile. 이 때 다음단계에서 사용 될 make variable이 setting 됨.
    classes-y variable 에 등록된 각 class들 생성(classes variable에도 추가됨)
    special-classes에 등록된 각 class에 대해 call handler  
    classes variable에 등록된 각 class에 대해서 $(class)-y 에 등록된 src들 추가.
    subdirs에 $(subdirs-y) 추가.

  evaluate_subdirs
    root directory부터 시작해서 bfs 형태로 subdir에 대해 call includemakefiles.

303 
  postinclude-hook를 call.
  postinclude-hook은 inlcudemakefiles에 의해서 설정.

306 
  $(class)-srcs 변수에 중복된 string들을 제거함

313-329
  $(class)-extra-specs 변수 설정
  $(class)-srcs 변수에서 $(class)-extra-specs 변수값들을 제거함.
  $(class)-srcs 및, src-to-obj, src-to-ali를 통해 $(class)-objs, $(class)-alis 변수 설정함.
  $(class)-ada-dirs 변수 설정.

331
  originalobjs설정
  $(classes)-objs 변수값을 originalobjs에 저장

334
  각 class에 대해($(classes)), post-processor($(class)-postprocess)를 call함.

337-339
  *-srcs, *-objs, $(allobjs)로부터 allsrcs, allobjs, alldirs를 설정.

352-375
  create_cc_template variable 정의
  create_cc_template은 주어진 인자를 통해 *-objs_*_template variable을 정의함.
  *-objs_*_template variable은 소스를 컴파일하는 make rule 로 정의됨.

377-382
  $(class)-$(type)-ccopts 변수값 설정(generic-$(type)-ccopts $(class)-generic-ccopts variable을 사용) (소스파일 컴파일을 위한 컴파일옵션 정의하는 듯)
  generic-objs_$(type)_template_gen variable이 존재한다면, 해당 변수, 아니라면 create_cc_template 변수를 call.(소스파일 컴파일을 위한 make rule 정의하는 듯)
  generic-objs_$(type)_template_gen variable은 Makefile.inc 213 line참조.

384-385
  각 class에 대해 foreach-src call.
  foreach-src
    *-srcs의 각 항목에 대해서 call *-objs_*_template 수행.
    generic-objs_$(type)_templage_gen variable에 의해 생성된 빌드룰 variable을 call하여 실제 make rule을 생성.

409-410
  각 class에 대해서 $(class)-alis 변수가 설정되어있다면 gnatbind_template을 call.

-$(srck)/Makefile.inc
7
  util/kconfig/Makefile을 include.

31-33
  make oldconfig rule존재
  util/kconfig/conf를 사용함.

-util/kconfig/Makefile
configuration들을 빌드하는 rule이 존재
338-339
  util/kconfig/conf를 빌드하는 rule
  conf-objs(conf.o, zconf.tab.o, $regext-objs)를 컴파일함.

-$(top)/Makefile.inc
57-58
  real-target, coreboot rule이 있음. 별도 recipe는 없음.
  real-target
    $(obj)/config.h coreboot files_added 이 prerequsite임
    $(obj)config.h : make oldconfig 에 의해 생성
    coreboot : 실제 이미지
    files_added : 빌드 마무리 작업 수행(?)
  coreboot
    build-dirs, $(obj)/coreboot.rom $(obj)/cbfstool $(objs)rmodtool $(obj)ifwitool 이 prerequisite.
    build-dirs : build-dirs rule에 의해 처리되며, 빌드디렉토리 생성
    $(obj)/coreboot.rom : 실제 coreboot img.
    $(obj)/cbfstool $(objs)rmodtool $(obj)ifwitool : 각 tool build rule에 의해 빌드 됨.

76-91
  subdirs-y variable에 대한 초기 설정.(빌드할 directory)

95
  초기 classes-y를 설정(빌드할 class들을 설정함)

97-99
  special class인 all 을 생성하고 all-handler를 정의.
  all-handler
    각 class (bootblock verstage romstage postcar ramstage)의 *-y variable에 인자로 넘어온 값을 append.

164-170
  ramstage-postprocess를 정의
  ramstage.a 를 생성하는 rule과 ramstage-objs variable을 설정함.

213-220
  *.ld를 생성하기 위한 rule을 정의.
  각 소스의 .ld파일에 대해 preprocessing을 수행하기 위한 rule이 정의되어있음.
  toplevel Makefile 에서 해당 rule을 call함

330-362
  special class인 cbfs_file을 생성하고, cbfs-files-handler를 정의.
  cbfs-files-handler(includemakefiles를 통해서 실행 됨)
  [cbfs-file]-file/type 등등,, 형태의 변수들을 각 Makefile들에 정의 후, cbfs-files-handler에서 해당 값 참조해서 처리함.
    ex. Makefile.inc 1136 line.
  즉 cbfs-files처리는 전체적으로 아래와 같은 흐름을 가짐
    cbfs-files-y variable 등록(Makefile의 cbfs-files-y var에 append(includemakefiles))
    includemakefiles에서 special class인 cbfs-files class처리. 
      cbfs-files-y에 등록된 각 값에 대해 cbfs-files-handler call.
      cbfs-files-handler에서는 cbfs-files var에 Makefile에 등록되어있는 cbfs-file별 variable(ex -file, -type...)을 사용하여 포맷팅 된 값을 append(append된 값은 make printall의 cbfs-files를 통해 확인)
    이후 각 cbfs-fils에 대해 cbfstool을 사용하여 add 수행.(prebuild-files)
    
  355
    cbfs-files-handler에서 처리한 값은 cbfs-files variable에 특정 포맷으로 append됨.(-file, -type 등의 variable들을 하나의 string으로 나타낸 포맷.)
  
    
513-514
  build-dirs $(objcbfs) $(objgenerated) rule존재
   단순이 $(objcbfs), $(objgenerated) 디렉토리를 생성함

516-573
  build에 필요한 tool들을 위한 rule정의

643-730
  bootblock*, *.elf, *.bin 을 생성하기 위한 rule 정의 됨.
  bootblock 생성 과정은 대략 아래와 같음
    bootblock.debug => 각 아키텍쳐별 소스트리로부터 컴파일.
    bootblock.elf
    bootblock.raw.elf
    booblock.raw.bin
    bootblock.bin

730-761
  cbfs-files string을 파싱하는 variable을 정의. (extract_nth)
  아래와 같은 string이며, '|' 를 기준으로 파싱하는 것으로 보임.(필드값을 뽑아냄)
  ./build/cbfs/fallback/romstage.elf|fallback/romstage|stage|none||64|--xip*-S*.car.data*-P*0x10000

763-769
  regions-for-file 정의
  FMAP의 section을 정의함. 기본적으로는 COREBOOT 이고, 필요에 따라 override해서 사용하나봄.(주석참조)

775-807
  cbfs-add-cmd, cbfs-add-cmd-for-region 정의
  cbfs-add-cmd는 cbfs-add-cmd-for-region의 단순 wrapper임
  cbfs-add-for-region은 각 cbfs-files 값에 대해 파싱(make printall의 cbfs-files 출력참조)하여 옵션,cmd를 체크하여 cbfstool add 를 실행함.
  
809-811
  prebuilt-files variable 정의되어있음.
  $(cbfs-files) 변수 각각에 대해서 extract_nth make variable을 call 수행.(file path들만 가져옴)

813-817
  all-regions 정의
  각 cbfs-files 에 대해서 FMAP section을 가져옴.(using regions-for-file)
  일반적으로는 COREBOOT 만 설정 됨.

819-825
  all-files-in-region 정의
  cbfs-files 각 값에 대해서 FMAP section string을 찾은 후, 해당 string을 리턴하거나
  없는경우, cbfs-files의 값을 그대로 세팅.

868-1010
  fmap(flashmap) 관련 rule이 정의되어있음.
  CONFIG_FMDFILE 값에 따라 fmap.fmd 파일 빌드 룰이 다름.
    y인 경우 입력된 CONFIG_FMDFILE을 전처리하여 fmap.fmd를 생성
    n인 경우 Makefile에 정의된 varaible기준으로 fmap.fmd를 생성
  x86과 non-x86에 대한 정의가 따로있음(CONFIG_ARCH_X86)
  fmap.fmap은 fmap.fmd를 $(FMAPTOOL)을 사용해서 생성, 이 때, fmap_config.h, fmap.desc도 생성 됨.

1015-1052
  coreboot.pre 생성을 위한 rule 정의
  makefile config에 따라 다른 동작을 수행함.(CONFIG_UPDATE_IMAGE)
  $(CBFSTOOL)을 사용하여 coreboot.pre 생성.

  prerequisite : $(objcbfs)/bootblock.bin $$(prebuilt-files) $(CBFSTOOL) $(IFITTOOL) $$(cpu_ucode_cbfs_file)      $(obj)/fmap.fmap $(obj)/fmap.desc
  $(objcbfs)/bootblock.bin : bootblock img
  $$(prebuilt-files) : 빌드된 cbfs file
  $(CBFSTOOL) $(IFITTOOL) : build를 위한 tool
  $$(cpu_ucode_cbfs_file) : n/a
  $(obj)/fmap.fmap $(obj)/fmap.desc : flashmap 파일
  
  $(CBFSTOOL)을 사용해서 $(obj)/coreboot.pre 를 생성

1068-1133
  $(obj)/coreboot.rom 생성을 위한 rule 정의
  $(obj)coreboot.pre $(RAMSTAGE) $(CBFSTOOL) $$(INTERMEDIATE) 가 prerequisite
  coreboot.rom img를 생성함.
    empty disk img를 생성 후 $(obj)coreboot.pre를 해당 img에 overwrite함
     이후 config에 따라서 $(CBFSTOOL) 과 같은 tool로 disk img를 조작.

build process
bootblock, romstage, ramstage, verstage, postcar ... 등등의 rule을 kconfig에 따라서 생성/실행 후, CBFS tool을 사용하여 각 img(bootblock, romstage ...)를 하나의 img로 merge하는 과정을 거치는 듯함. 그리고 이 merged img를 rom에 upload해서 사용하는 듯.

all:real-all
  real-all:real-target
    real-target: $(obj)/config.h coreboot files_added
      $(KCONFIG_AUTOHEADER): $(KCONFIG_CONFIG) $(objutil)/kconfig/conf
      $(obj)/config.h: $(objutil)/kconfig/conf
      
      coreboot: build-dirs $(obj)/coreboot.rom $(obj)/cbfstool $(obj)/rmodtool $(obj)/ifwitool
        build-dirs $(objcbfs) $(objgenerated):

        $(obj)/coreboot.rom: $(obj)/coreboot.pre $(RAMSTAGE) $(CBFSTOOL) $$(INTERMEDIATE)
          $(obj)/coreboot.pre: $(objcbfs)/bootblock.bin $$(prebuilt-files) $(CBFSTOOL) $(IFITTOOL) $$(cpu_ucode_cbfs_file) $(obj)/fmap.fmap $(obj)/fmap.desc
          config에 따라서 실행되는 rule은 다름.
            $(objcbfs)/%.bin: $(objcbfs)/%.raw.bin
            config에 따라 실행되는 rule은 다름.
              $(objcbfs)/bootblock.raw.bin: $(objcbfs)/bootblock.raw.elf
                $(objcbfs)/bootblock.raw.elf: $(objcbfs)/bootblock.elf
                config에 따라서 실행되는 rule이다름.
                  $(objcbfs)/%.elf: $(objcbfs)/%.debug
                    bootblock.debug rule은 cpu architecture별(즉, config 따라) 다름.
                    x86인 경우, 
                    $$(objcbfs)/$(1).debug: $$$$($(1)-libs) $$$$($(1)-objs)
                      *-libs, *-objs에 대한 rule들은 toplevel Makefile 및 포함되는 Makefile들에서 처리됨.

            $(prebuilt-files)는 variable에 설정된 파일들을 의미함.
            prebuilt-files = $(foreach file,$(cbfs-files), $(call extract_nth,1,$(file)))
            

            $(CBFSTOOl), $(IFTITOOL)은 build tool.

            $(cpu_ucode_cbfs_file)
               사용되지는 않는 듯.

            $(obj)/fmap.fmap: $(obj)/fmap.fmd $(FMAPTOOL)
              

            $(obj)/fmap.desc: $(obj)/fmap.fmap
            
            reciepe 실행 시, $(prebuild-files) 를 수행하여 cbfs 에 필요한 이미지를 추가
            prebuild-files는 cbfs-files class로부터 cbfs이미지 생성을 위해 cbfstool command 를 생성하는 variable임.
            
          $(objcbfs)/%.elf: $(objcbfs)/%.debug
          RAMSTAGE variable은 설정에 따라서 $(objcbfs)/ramstage.elf 로 초기화되거나 empty이므로 해당 rule이 실행될 수도있고 아닐수도있음.

          $(objutil)/cbfstool/cbfstool: $(addprefix $(objutil)/cbfstool/,$(cbfsobj)) $(VBOOT_HOSTLIB)        
          CBFSTOOL:=$(objutil)/cbfstool/cbfstool
          subdirs-y += util/cbfstool util/sconfig util/nvramtool util/pgtblgen 를 inlcude할 때 cbfstool make rule이 포함됨.
    
          check-ramstage-overlaps: $(obj)/coreboot.pre
          $(INTERMEDIATE)는 config에 따라서 다양한 rule들이 실행될 수 있음. 기본적으로 INTERMEDIATE+=check-ramstage-overlaps 가 포함됨.

        $(obj)/cbfstool: $(CBFSTOOL)

        $(obj)/rmodtool: $(RMODTOOL)

        $(obj)/ifittool: $(IFITTOOL)

      files_added:: build_complete
      files_added는 빌드에 포함 될 항목에 따라서 추가적인 rule들을 실행할 수 있음.

-$(top)/src/arch/x86/Makefile.inc
stage별(bootblock, romstage, ramstage, postcar ...)에 대한 make rule이 정의 됨.

cbfstool
  최초 이미지 create시, fmap 파일을 읽고 파싱해서 rom layout을 가지는 초기이미지를 만들고 파일에다가 write.
  초기이미지는 fmap영역 데이터 + 비어있는 cbfs component 정보(?)
  이후 빌드하면서 cbfs component들(ex. bootblock, romstage, ramstage ...)을 채우는 듯.
  
---------------------------------------------------------------------------------------------------------
coreboot.rom 파일 구조
cbfstool print, layout command사용해서 같이 확인해보면 좋을 듯함.

CBFS
  [srctree]/Documentation/cbfs.txt 참조
  
  ROM내부의 데이터 chunk를 독립적으로 관리하는 schme. (filesystem 비슷한 개념으로 볼 수 있음)

  The CBFS architecture looks like the following:

/---------------\ <-- Start of ROM 
| /-----------\ | --| 
| | Header    | |   |   
| |-----------| |   |   
| | Name      | |   |-- Component
| |-----------| |   |   
| |Data       | |   |   
| |..         | |   |   
| \-----------/ | --| 
|               |
| /-----------\ |
| | Header    | | 
| |-----------| |
| | Name      | | 
| |-----------| |
| |Data       | |
| |..         | |
| \-----------/ |
|               |
| ...           |
| /-----------\ |
| |           | |
| | Bootblock | | 
| | --------- | | 
| | Reset     | | <- 0xFFFFFFF0
| \-----------/ |
\---------------/

  각 Component는 header, data 로 구성되어있음.
  Bootblock ROM은 ROM의 마지막부터 20K를 차지
  Bootblock 내에는 master header가 있으며 해당 header에는 ROM size, componet 구성 등에 대한 정보를 가지고 있음.

  Master Header
    CBFS ROM에 대한 정보를 가지고 있음
    bootblock 내에 존재하며, ROM end - 4 위치에 master header로의 offset이 저장되어있음.(0xFFFFFFFC)

  Bootblock
    ROM내에 존재해야하는 필수 componet임. 
    ROM의 마지막부터 20K를 차지
    master header의 위치와 loader firmware의 entry point정보를 가지고 있음.
    일반 Component와는 달리 component header는 없음.

  Components
    Bootblock master header의 offset부터 bootblock시작까지의 위치에 존재함.
    각 Componet는 align 됨.
    각 Component는 unique ASCII string으로 index 됨.

  Data Types
    Component의 data 영역의 type이 4가지 있음.
    Stages
      boot process동안 coreboot에 의해 load되는 코드.
       부팅에 필수적임
      stage type은 별도 header정보를 포함하고 있음.

    Payloads
      

    Option Roms

    NULL
    
FMAP(Flashmap)
  flash chip 의 파티션을 기술하는 binary format.
  FMAP은 image를 구분된 섹션들로 나눔.
  struct fmap(header)와 struct fmap_area의 list로 구성됨.
  
  FMAP section
    struct fmap, list of struct fmap_area는 FMAP section에 저장되어야 함.
  COREBOOT section
    coreboot firmware img(coreboot.rom)을 위한 Flashmap section
  Flashmap Descriptor(FMD)
    Flashmap으로 포맷팅된 firmware img를 생성하기 위해 사용되는 language이자 compiler임.
    netsted section도 가능.(단, 실제로는 하나의 연속적인 struct fmap_area list로 관리하는 것으로 보임.)

COREBOOT img 구조
  FMAP
    아래와 같은 fmap.fmd 를 사용
    FLASH@4294705152 0x00040000 {
        BIOS@0 262144 {
    
    
    
                FMAP@0 0x200
                COREBOOT(CBFS)@512 261632
        }
    }
    위 fmap.fmd를 빌드한 결과 fmap.fmap은 Doc에 명시되어있는데로 구성되어있음(hexdump참조)
00000000  5f 5f 46 4d 41 50 5f 5f  01 01 00 00 fc ff 00 00  |__FMAP__........|  => __FMAP__부터 fmap의 헤더부분(struct fmap)(fmd에서 FLASH@~으로 기술되어있는 부분)
00000010  00 00 00 00 04 00 46 4c  41 53 48 00 00 00 00 00  |......FLASH.....|  => FLASH 부터 fmap의 section 부분(struct fmap_area)(fmd에서 BIOS@부터 ...)
00000020  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000030  00 00 00 00 00 00 03 00  00 00 00 00 00 00 04 00  |................|
00000040  42 49 4f 53 00 00 00 00  00 00 00 00 00 00 00 00  |BIOS............|
00000050  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000060  00 00 00 00 00 00 00 02  00 00 46 4d 41 50 00 00  |..........FMAP..|
00000070  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000080  00 00 00 00 00 00 00 00  00 00 00 00 00 02 00 00  |................|
00000090  00 fe 03 00 43 4f 52 45  42 4f 4f 54 00 00 00 00  |....COREBOOT....|
000000a0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
000000b6

  COREBOOT
    coreboot.pre.....
    
------------------------------------------------------------------------------------------------------
cbfstool
-cbfstool.c
23-34
  struct command 정의
  cbfstool command를 정의

36-87
  struct param 정의
  .region_name은 "COREBOOT" 로 초기화 됨.
  cbfstool이 동작할 때 사용할 파라미터 값들을 저장. command line option을 통해서 결정 됨.

430-566
  cbfs_add_component()
  CBFS component를 cbfs img에 추가.
  455
    cbfs image를 load(cbfs_image_from_buffer())
  458
    cbfs image에 name을 가진 component가 있는지 확인(cbfs_get_entry())
  463-467
    file을 read(buffer_from_file())
  477-478
    cbfs file header를 생성(cbfs_create_file_header())
  480-484
    convert function을 call.(function pointer 인자로 넘어옴)
  556
    cbfs_add_entry() call

733-769
  cbfstool_convert_mkpayload()
  739-755
    input된 struct buffer데이터를 사용하여 CBFS payload를 생성  
    753-756
      linux kernel의 payload img를 생성(parse_bzImage_to_payload())
  764-767
     기존 input struct buffer정보를 해제(불필요하므로)
    payload정보를 input된 struct buffer에 copy

788-826
  cbfs_add()
  cbfs_add_component() call

913-997
  cbfs_create()
  cbfstool create command
  917
    param.image_region의 buffer를 slice(buffer_clone())
  flashmap file이 존재하면, cbfs_image_create() call

1328-1377
  dispatch_command()
  1333-1341
    partitioned_file_t->fmap이 있는지 check(partitioned_file_is_partitioned())
    partitioned_file_t로부터 FMAP section의 region을 read.
    
  1349
    read한 region이 FMAP secion인지 check(region_is_flashmap())
  1357
    read한 region이 nested되었는지 check(partitioned_file_region_contains_nested())
  1367-1374
    실제 command function call.

1496-1843
  main()
  1510-1512
    commands tbl 에서 입력된 command를 찾음.
  1514-1745
     cmdline option을 파싱하여 param에 설정
  1747-1762
     flashmap file(fmap.fmap)을 read하고 해당 정보기반하며 초기 firmware img를 생성(partitioned_file_create())
  1772-1775
    region의 개수를 counting
  1785-1811
    각 region별로 dispatch_command call.
  1821-1834
    각 region별 data를 firmware img에 write(partitioned_file_write_region())
   
-cbfs-payload-linux.c
kernel의 x86 boot protocol(kernel src tree참조)에 따라서 아래와 같이 CBFS payload img를 생성함.(bootloader가 하는 일을 비슷하게 수행하함)
  bzImage의 bootsect+setup 부분은 LINUX_PARAM_LOC에 load되도록,
  bzImage의 compressed kernel(bootsect+setup을 제외한 나머지부분)은 kernel_base(일반적으로 compressed kernel의 head 시작부분 0x100000) lood되도록,
  trampoline(coreboot이 kernel을 최초 시작하는 부분)은 TRAMPOLINE_ENTRY_LOC load되도록,
  kernel cmdline COMMAND_LINE_LOC load되도록
  initrd는 initrd_base(kernel이미지와 겹치지 않는 영역) load되도록
27-42
  strcut bzpayload 정의

44-61
  bzp_init()
  struct bzpayload 초기화.

63-76
  bzp_add_initrd()
  initrd load하여 bzpayload->initrd buffer를 세팅

78-83
  bzp_add_segment()
  input된 struct buffer에 data, size를 사용하여 초기화(buffer_init())
  bzpayload->num_segment++수행

85-90
  bzp_add_trampoline()
  trampoline관련 데이터 버퍼를 설정

120-139
  bzp_init_output()
  bzpayload->out buffer를 설정(buffer_create())

141-172
  bzp_output_segment()
  bzpayload->out buffer에 input된 segment data를(CBFS payload data) 추가

187-321
  parse_bzImage_to_payload()
  입력된 kernel img관련 파일(bzImgae, initrd, cmdline, parameter...) 정보를 각각의 CBFS payload segment로 변환하여 CBFS rom에 데이터 추가
  196-212
    bzpayload 초기화(bzp_init())
    trampoline, initrd, cmdline 등 초기화(bzp_add_*())
  214-266
    bzImage의 setup section정보 기반으로 linux_params정보 설정
  268-269
    kernel img(bzImage) 초기화(bzp_add_kernel())
  284-285
    linux_params 초기화(bzp_add_params())
    *linux_params는 빌드된 bzImage파일의 bootsect+setup부분을 read하여 설정해서 cbfs payload에 추가됨.
  287-288
    bzpayload->out buffer초기화(bzp_init_output())
  290-319
    kernel img를 bzpayload->out에 추가(bzp_output_segment())
  
-cbfs_image.c
80-84
  cbfs_calculate_file_header_size()
  cbfs component의 header size를 return

208-256
  cbfs_image_create()
  255
    return cbfs_create_empty_entry() call
  
352-378
  cbfs_image_from_buffer()
  input된 struct buffer를 struct cbfs_image에 copy후, 유효한 CBFS img인지 확인.

642-732
  cbfs_add_entry_at()
  729
    cbfs_create_empty_entry()

734-820
  cbfs_add_entry()
  810
    cbfs_add_entry_at() call

822-834
  cbfs_get_entry()
  struct cbfs_image에서 cbfs_file->filename이 name이랑 동일한 entry를 찾아서 return

850-858
  cbfs_add_payload()
  call cbfs_add_component() 

1793-1806
  cbfs_create_file_header()
  cbfs componet header를 alloc/init후 return.

1808-1816
  cbfs_create_empty_entry()
  input cbfs_file에 할당한 cbfs_file(cbfs_create_file_header())을 copy

-partitioned_file.c
12-16
  struct partitioned_file 정의
  open 한 파일에 대한 정보를 메모리에 가지고 있음

40-67
  reopen_flat_file 함수
  partitioned_file 구조체 할당 및 input인 filename을 read함.

69-98
  partitioned_file_create_flat()
  partitioned_file_t alloc 후 해당 구조체 초기화.
  할당된 buffer는 1로 채워 file에 write(fill_ones_through)

100-153
  partitioned_file_create()
    flashmap descriptor정보기반으로 초기 img를 구성(FMAP sectino만 채워짐)
    107-111
      input된 data에 fmap이 존재하는 지 check
    127-137
      input된 data의 fmap size check
    139
      input된 filename에 fmap data를 write하고 해당 partitioned_file_t를 할당/초기화(partitioned_file_create_flat())
    144-151
      filename에 FMAP section에 FMAP section정보(struct fmap + struct fmap_area ...)를 write(partitioned_file_wrtie_region()) 및 partitioned_file_t->fmap에 해당 FMAP section정보를 setting.
    153
       할당된 partitioned_file_t return.

156-201
  partitioned_file_reopen 함수 
  입력된 filename 을 open하고, fmap정보 check/read 후 partitioned_file_t(struct partitioned_file) 구조체를 return함.

203-229
  partitioned_file_write_region()
    partitioned_file_t->stream(fp)의 특정 offset에 struct buffer->data 를 write.

231-261
  partitioned_file_read_region()
    240 
      partitioned_file_t->fmap 으로부터 section이름이 region 인 fmap_area를 찾음
    251
      찾은 fmap_area정보를 기반으로 region 에 대한 buffer를 dest에 splice.(buffer_splice())
    

263-275
  partitioned_file_close 함수정의
  할당한 partitioned_file_t 구조체를 free함.

277-280
  partitioned_file_is_partitioned()
    (partitioned_file_get_fmap()이 NULL이 아닌 지 check

310-315
  partitioned_file_get_fmap()
    partitioned_file_t->fmap pointer return
  
-common.h
30-35
  struct buffer 정의
  buffer에 대한 정보를 나타냄.

-common.c
52-78
  buffer_from_file 함수
  filename을 fopen하고 read하여 struct buffer를 세팅하여 return함.
   
-flashmap/fmap.h
23-28
  struct fmap_area 정의
  fmap section(struct fmap_area)를 정의
30-40
  struct fmap 정의
  fmap header(struct fmap) 구조체

-flashmap/fmap.c
33-39
  fmap_size()
  input된 struct fmap 정보로부터 fmap data의 size를 return(fmap header(struct fmap) + fmap area(struct fmap_area * fmap->nareas))

147-160
  fmap_find 함수정의
  buffer에서 fmap header(struct fmap)를 찾아 그 offset을 return

313-330
  fmap_find_area()
  fmap 에서 이름이 name인 fmap_area를 return

-----------------------------------------------------------------------------------
coreboot boot sequence
overview
  ROM에 coreboot.rom(CBFS) write
  부팅하면 bootblock reset instruction먼저 실행됨. 이후 CBFS format인 rom을 search하면서 다음과같이 stage들을 load/run함.
  bootblock -> romstage -> postcar -> ramstage -> payload...
  *ramstage의 main fuction은 src/lib/hardwaremain.c 의 main function


src/arch/x86/bootblock_crt0.S
60
  bootblock_pre_c_entry로 jmp

src/cpu/x86/16bit/reset16.inc
6
  _start
  coreboot 최초 entry point.
  _start16bit label로 jmp.
  
src/cpu/x86/16bit/entry16.inc
38
  _start16bit
  processor 상태를 초기화하고(to 32bit protected mode), __protected_start label로 jmp.

src/cpu/x86/32bit/entry32.inc
35
  __protected_start
  ds, es, ss, fs, gs register를 ROM_DATE_SEG로 초기화
  나머지 코드는 bootblock_crt0.S와 이어짐.
  
src/cpu/qemu-x86/cache_as_ram_bootblock.S
6
  bootblock_pre_centry
  16-21
    _car_region_start ~ _car_egion_end 영역을 0으로 clear
  25-28
    esp register를 초기화
  51
    bootblock_c_entry_bist call


src/cpu/qemu-x86/bootblock.c
7
  bootblock_c_entry_bist()
  bootblock_main_with_basetime() call

src/lib/bootblock.c
28-63
  bootblock_main_with_timestamp()
  run_romstage() call

65
  bootblock_main_with_basetime()
  bootblock_main_with_timestamp() call

src/arch/x86/assembly_entry.S
romstage 시작부분
18-56
  _start label
  22-48
    gdt, esp, bss 영역 초기화
  52
    call car_stage_entry label

src/cpu/intel/car/romstage.c
21-61
  romstage_main()
  23-54
    stk 영역 초기화(car 영역(memlayout.ld 참조))
    47
      mainboard_romstage_entry() call
  59
    prepare_and_run_postcar() call

68-76
  car_stage_entry()
  romstage_main() call

src/arch/x86/postcar_loader.c
postcar는 rmodule 형태로 빌드되고 해당 rmodule이 cbfs rom에 추가되는 것으로 확인 됨.(Makefile 참조)
27-35
  postcar_frame_prepare()
  MTRR register의 값을 읽어와서 postcar_frame->upper_mask, max_var_mtrrs, num_var_mtrrs 초기화

37-61
  postcar_frame_init()
  stack영역 설정
  47-55
    imd로부터 stack영역 메모리를 가져옴(cbmem_add())
  58-59
    postcar_frame->stack 영역을 초기화
  
63-104
  postcar_frame_add_mtrr()
  stack영역에 계산된 mtrr정보를 push

106-111
  postcar_frame_add_romcache()
  call postcar_frame_add_mtrr()

113-120
  postcar_frame_common_mtrrs()
  call postcar_frame_add_romcache()

124-135
  prepare_and_run_postcar()
  126
    stack영역 할당(postcar_frame_init()
  131
    mtrr정보 stack에 push
  133
    call run_postcar_phase()

137-145
  postcar_commit_mtrrs()
  stack에 postcar_frame->num_var_mtrrs, max_var_mtrrs를 push

158-182
  load_postcar_cbfs()
  167
    CBFS rom img에서 postcar stage를 찾음(prog_locate())
  170
    rmodule stage를 load(rmodule_stage_load())
  
207-235
  run_postcar_phase()
  225
    postcar를 load(load_postcar_cbfs())
  232
    postcar stage arg(cbmem_top()return값) 설정(prog_set_arg())
  234
    run postcar stage(prog_run())

src/arch/x86/include/arch/romstage.h
17-23
  struct postcar_frame정의
  MTRR information을 구성하는 stack frame정보

src/lib/rmodule.c
29-59
  rmodule_parse()
  input addr로부터 rmodule 을 setting

169-190
  rmodule_load()
  input base addr로 rmodule payload를 copy

192-236
  rmodule_calc_region()
  해당 function 내 주석참조
  region_size, load_offset을 setting. 
  rmodule_offset을(rmodule_header address) return

238-290
  rmodule_stage_load()
  254
    cbfs_stage정보를 read(rdev_readat())
  257-258
    rmodule offset 및 region_size, load_offset을 setting(rmodule_calc_region())
  261
    stage_region를 가져옴(cbmem_add())
  271-273
    cbfs stage data를 rmod_loc로 copy(cbfs_load_and_decompress())
  275-287
    rmod_loc에 copy rmodule(cbfs stage data)를 rmodule_parse/load 하여 prog의 entry및 arg 설정
  
src/lib/imd_cbmem.c
44-47
  cbmem_initialize_empty()
  cbmem_initialize_empty_id_size() call

49-59
  cbmem_top_init_once()
  58
    memory check수행(quick_ram_check_or_die())

61-83
  cbmem_initialize_empty_id_size()
  imd를 초기화.

120-128
  cbmem_recovery()
  cbmem_initailize_empty() call

139-149
  cbmem_add()
  imd에 주어진 id를가진 imd_entry를 찾음.(없으면 추가) 하여 imd_entry의 address를 return

src/mainboard/emulation/qemu-i440fx/romstage.c
6-9
  mainboard_romstage_entry()
  imd를 초기화함(cbmem_recovery())

src/mainboard/emulation/qemu-i440fx/memmap.c
31-40
  qemu_get_memory_size()
  CMOS를 통해서 memory size를 read해옴.
   참고. https://wiki.osdev.org/CMOS

42-51
  cbmem_top_chipset()
  firmware config interface or cmos를 통해서 memory size(memory의 top addr)를 얻어옴
  
src/mainboard/emulation/qemu-i440fx/fw_cfg.c
qemu firmware config interface관련 코드.(qemu code로 부터 copy해와서 적절히 수정한 버전임) => 제대로 이해하려면 qemu firmware config interface 알아야 할 듯함.(qemu firmware config interface 로 구글링하면 정보가 좀 있넹)

25-43
  fw_cfg_present()
  FW_CFG_PORT로부터 signature를 read하고 cmp.
  signatrue를 찾은 경우 1을 return

45-48
  fw_cfg_select()
  FW_CFG_PORT_CTL로 val을 write(x86 out instruction 사용)

50-56
  fw_cfg_read()
  FW_CFG_PORT_DATA로부터 data를 read(x86 in instruction 사용)  

58-62
  fw_cfg_get()
  FW_CFG_PORT로 data 요청 후 data를 read함.(fw_cfg_select(), fw_cfg_read())

64-81
  fw_cfg_find_file()
  input된 name을 가진 FWCfgFile을 firmware config interface를 통해서 찾아서 setting.

90-99
  fw_cfg_e820_select()
  firmware config interface를 통해서 e820을 선택?

101-110
  fw_cfg_e820_read()
  e820으로부터 메모리 정보를 read

113-127
  fw_cfg_tolud()
  memory size를 read후 return

src/lib/imd.c
66-73
  imdr_get_root_pointer()
  imdr 영역으로부터 imd_root_pointer 를 위한 memory address를 가져옴(relative_pointer())

114-121
  imd_entry_assign()
  imd_entry를 초기화

123-129
  imdr_init()
  imdr을 초기화
  imdr->limit은 input parameter, imdr->r은 NULL로 초기화

131-188
  imdr_create_empty()
  비어있는 imdr을 생성.
  src/include/imd.h 최상단 주석의 root pointer ~ root block부분.

305-339
  imd_entry_add_to_root()
  imd_root에 imd_entry를 추가

341-355
  imdr_entry_add()
  imdr에 imd_entry를 추가(imd_entry_add_to_root())

387-391
  imd_handle_init()
  imd를 초기화(imdr_init())
  imd->lg는 upper_limit, imd->sm은 0으로 초기화 됨.
  
426-461
  imd_create_tiered_empty()
  imd->lg, imd->sm을 생성(imdr_create_empty())

src/lib/ramtest.c
177-205
  quick_ram_check_or_die()
  특정 memory 영역에 값을 read/write하면서 memory check수행

src/arch/x86/postcar_loader.c
124-135
  prepare_and_run_postcar()
  

src/arch/x86/exit_car.S
15-127
  _start label(postcar entry point)
  124
    main 으로 jmp

src/arch/x86/postcar.c
17-35
  main()
  postcar C main function
  call run_ramstage() 

src/arch/x86/c_start.S 
30-103
  _start label(ramstage entry point)
  
src/lib/hardwaremain.c
50-59
  struct boot_state 정의

74-87
  boot_state boot_states 정의

91-94
  bs_pre_device()
    nothing to do

96-104
  bs_dev_init_chips
    dev_initialize_chips()
  
263-295
  bs_call_callbacks()
  boot_state->boot_phase[type]에 등록된 callback들을 실행. 각 실행된 callback은 리스트에서 제거 됨.
  269-282
    boot_state->boot_phase[type]에 등록된 callback들을 실행. 각 실행된 callback은 리스트에서 제거 됨.

298-304
  state_tracker current_phase정의. 아래 값을 초기화 됨.
    state_tracker->state_id = BS_PRE_DEVICE
    state_tracker->seq = BS_ON_ENTRY

306-361
  bs_walk_state_machine()
  payload booting을 위한 boot_state들을 실행.
  current_phase의 값과, boot_state_t next_id를 사용해서 state machin동작시킴.
  313
    현재 boot_state를 가져옴(by current_phase)
  329
    현재 boot_state->boot_phase[BS_ON_ENTRY]에 등록된 callback 실행
  339
    현재 boot_state->run_state() callback을 실행.
    다음 boot_state id(next_id)를 가져옴
  347
    현재 boot_state->boot_phase[BS_ON_EXIT]에 등록된 callback 실행
  354-355
    current_phase 값 update  

363-379
  boot_state_sched_callback()
  boot_state->phase[type].callback에 callback을 등록
  callback들은 linked list로 관리 됨.
  각 boot_state별로 동일 type에 대한 callback list를 관리

397-410
  boot_state_schedule_static_entries()
    각 boot_state_init_entry의 callback을 boot_state에 등록(boot_state_sched_on_entry(), boot_state_sched_on_exit())
    BOOT_STATE_INIT_ATTR macro에 의해서 .bs_init section에 등록된 데이터들을 참조함.(근데 현재는 1개말고는 딱히 없어보임..)

412-459
  main()
  ramstage C entry point.
  428-451
     실행환경 초기화(timer, console, interrupt 등)
  454

src/device/device.c
31-45
  dev_initialize_chips()
    all_devices를 참조하여 모든 struct device에 대해서 init을 수행
    qemu-i440fx의 경우 아무 작업 수행되지 않음.
  
892-925
  scan_bus()
    device에 등록된 ops->scan_bus()를 호출
    dev_root부터시작하여 모든 topology를 순회하면서 device enable을 시킴

960-982
  dev_enumerate()
    scan_bus() 호출하여 bus를 scan함.

src/include/device/device.h
72-89
  struct bus정의
    struct device dev : 해당 bus device
    struct device children : 해당 bus에 있는 device
    struct bus next : 

103-150
  struct device 정의
    struct bus bus : 상위 bus device.
    struct device sibling : 상위 bus의 sibling
    struct device next : system의 모든 struct device를 관리하는 리스트
    struct bus link_list : 해당 device에 연결된 bus device.

참고
  dev_root_links[0](dev_root)
    _dev0_links[0](_dev0)
      _dev2
    _dev1_links[0](_dev1)
      _dev3
      _dev4
      _dev5
      _dev6

src/device/device_const.c
12
  struct device* all_devices 정의
  dev_root 로 초기화됨

src/device/root_device.c
94-106
  scan_static_bus()
    enable_static_device()
    

build/mainboard/emulation/qemu-i440fx/static.c
5-10
  device operation정의
  mainboard_ops{
  }
  cpu_qemu_x86_ops{
    .name = "QEMU x86 CPU"
  }
  mainboard_emulation_qemu_i440fx_ops{
    .name = "QEMU Northbridge i440fx"
    .enable_dev = northbridge_enable
  }
  southbridge_intel_i82371eb_ops{
    .name = "Intel 82371FB/SB/MX/AB/EB/MB Southbridge"
  }

35-52
  struct device dev_root정의

src/lib/prog_loaders.c
26-40
  prog_locate()
  CBFS영역을 load하여 struct prog를 load함.
  
42-73
  run_romstage()
  53
    struct prog(romstage)를 load(prog_locate())
  59
    struct pog(romstage)에, CBFS stage정보를 load.(cbfs_prog_stage_load())
  66
    load한 romstage의 func을 호출(prog_run())

106-152
  run_ramstage()
  run ramstage 
  128-129
    ramstage 를 가지고있는 CBFS영역 찾음(prog_locate())
  133-137
    load ramstage(load_relocatable_ramstage())
  146-148
    argument 설정(prog_set_arg()) 및 ramstage run(prog_run())

159-186
  payload_load()
  payload를 load함.
  165-166
    CBFS rom img에서 payload compnent를 load
  168-181
    payload load를 수행(selfload_check())
  184-185
    payload entry가 설정되었는 지 check(prog_entry())

src/include/bootstate.h
77-90
  boot_state_t 정의

94-97
  boot_State_sequence_t 정의

164-168
  struct boot_state_init_entry 정의

src/lib/selfboot.c
49-119
  load_one_segment()
  64-91
    cbfs payload segment를 load address에 copy
  
150-221
  load_payload_segments()
  158-218
    각 cbfs_payload_segment에 대해서 다음을 수행함
    161-165
      cbfs_payload_segment header정보를 read
    167-210
      cbfs_payload_segment type별로 필요 variable설정
    216
      cbfs_payload_segment data를 load(load_one_segment())

235-264
  _selfload()
  241-243
    CBFS payload component data를 return(selfprepare())
  245
    cbfs_payload_segment header의 첫번째 pointer 설정
  247-248
    cbfs_payload_segment check수행
  250-251
    cbfs_payload_segment load수행(load_payload_segments())
  258
    struct prog에 entry point설정(prog_set_entry)

266-269
  selfload_check()
  call _selfload()

src/lib/cbfs.c
26-58
  cbfs_boot_locate()
  30
    region_device setting(cbfs_boot_region_device())
  33
    input된 name, type에 일치하는 CBFS componet를 찾음(cbfs_locate())

212-261
  cbfs_prog_stage_load()
  CBFS stage정보를 load하여 struct prog에 setting.
  
  
263-268
  cbfs_boot_region_device()
  flashmap의 COREBOOT section을 region_device와 accciated.(fmap_locate_area_as_rdev())

src/lib/fmap.c
44-86
  setup_preram_cache()
  

88-122
  find_fmap_directory()
  95-98
    fmap_cache를 사용할 경우 fmap_cache처리(rdev_chain_full)
  106
    fmap정보를 struct region_device로부터 read(rdev_mmap())
  111-115
    read한 fmap의 signature를 check
  121
    input된 region_device를 setting(rdev_chain())

124-132
  fmap_locate_area_as_rdev()
  128
    input된 name의 region을 찾음(fmap_locate_area())
  131
    region_device setting(boot_device_ro_subregion())

144-183
  fmap_locate_area()
  149
    FMAP section을 read(find_fmap_directory())
  155-178
    FMAP area에서 area name이 input name과 동일한 fmap_area정보를 region에 load
  
src/arch/x86/mmap_boot.c
9-10
  struct mem_region_device boot_dev 정의
  다음과 같이 초기화 됨.
  mem_region_device->base = 0x100000000ULL-CONFIG_ROM_SIZE
  mem_region_device->rdev =
    rdev->root = NULL
    rdev->ops = mem_rdev_ro_ops
    rdev->region =
      region->offset = 0
      region->size = CONFIG_ROM_SIZE

src/lib/boot_device.c
17-25
  boot_device_subregion()
  sub region_device에 parent region_device 및 input된 region을 setting.

src/commonlib/cbfs.c
157-224
  cbfs_locate()
  input된 name, type에 일치하는 CBFS component를 찾아서 input cbfsf에 load.

src/commonlib/region.c
136-155
  rdev_chain()
  child region_device를 setting.
  parent의 전체region 내부에 child region이 생성되는 개념인듯.

220-228
  mdev_mmap()
  region_device operation callback.
  mem_region_device->base[offset]의 address를 return.

236-246
  mdev_readat()
  destination buffer에 mem_region_device->base[offset]부터 size까지 copy.

src/commonlib/include/commonlib/region.h
76-79
  struct region 정의.

81-85
  struct region_device 정의.
  memory 영역과 연관 됨.

132-135
  region_device_sz()
  struct region_device->region의 size를 return

167-170
  struct mem_region_device 정의.  

-기타memo
-ELF의 section의 offset은 어떻게 설정되는 지는 정확하게 모르겠음. 그러나 중요한건 각 section은 특정 file offset ~ file size만큼 차지함(단 type에 따라 파일에 없을 수도있음(ex. NOBITS)
-ELF의 segment-section mapping은 segment offset~filesize 범위에 포함되는 section들로 보면 됨. 즉, segment offset~filesize범위내 에 존재하는 연속적인 섹션들이 포함된다고 보면 될 듯함.
-objcopy binary의 경우 ELF로부터 process memory img부분만 가져옴.(정확히 어떻게 처리되는 지는 모르겠음)
-coreboot.rom img의 경우, cbfs add시, ELF파일 정보를 파싱해서 다른 정보로 업데이트 하고 추가할 수 있는것으로 확인 됨.(ex. romstage, cbfstool extract cmd를 통해서 cbfs add까지 완료한 정보를 빼올 수 있음.;)
