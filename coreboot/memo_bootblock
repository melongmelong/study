next : 완료
       *$(top)/build/cbfs/fallback/ 에 중간산출물들(ex. bootblock.elf) 존재함!
       *make -p 도 분석에 도움됨!
       *x86 asm syntax는 gnu as document 참조!
       *NOTICE : 확인중 Make, ld, asm, x86 arch등에 대해서 잘 모르는 내용이 나올 수 있고, 해당 내용 별도학습 없이 더이상 진행불가로 판단될 경우에는 해당 내용을 학습하고 다시 진행(function call ~ return 수행 ㅋㅋ)
*1-10단계학습법 적용
*참고.
  1-6단계, 목표, 계획, 학습데이터 모으는 단계
  7단계(대충 사용 수준까지)
  8단계(이것저것해보기)
  9단계(유용한 것을 할수있는 수준까지 파기)
  10단계(가르치기)

주제 : coreboot 오픈소스 분석 - bootblock 빌드과정 / 주요 흐름코드 파악
학습이유
  coreboot 오픈소스 분석
    low-level 지식 향상 
    오픈소스 프로젝트 참여
    => low-level 커리어 up!
  이번에는 coreboot최초 stage에 대한 빌드과정과 주요흐름파악

학습목표
  bootblock 빌드과정 이해
  bootblock 주요동작 이해
    
학습자료
  coreboot 공식홈페이지 doc(https://doc.coreboot.org/getting_started/index.html)
  coreboot source code

학습계획
  milestone1. bootblock의 빌드과정과 주요동작 이해.
  
=======================
milestone1. bootblock의 빌드과정과 주요동작 이해.

7단계(대충 사용 수준까지) - bootblock 빌드과정및 주요동작에 대한 큰 흐름 이해
코드분석은 coreboot 24.05 version기준!
=====================1. bootblock 빌드과정=================================
directory경로는 coreboot top level directory($(top))기준임.
전체개요
  $(top)/Makefile에서 사용할 toolchain정보를 세팅($(top)/toolchain.mk를 include하는 시점에 세팅됨!)
  $(top)/Makefile에서 하위 디렉토리 Makefile.mk(or .inc)파일들을 모두 include(Kconfig설정에따라)
    이 과정에서 필요한 변수들(ex. 빌드에 포함될 소스파일, 컴파일옵션, 빌드룰)이 세팅됨.
    주요변수들(bootblock관점)
      bootblock-y : bootblock빌드에 포함될 소스들을 위한 임시변수! 해당 값 기반으로 bootblcok-srcs 가 채워진다 보면 됨
      bootblock-srcs : bootblock빌드에 포함될 소스들
      bootblock-objs : bootblock-srcs 컴파일시 object파일에 대한 경로
      bootblock-*-opts : bootblock빌드시 컴파일 옵션
      bootblock-*-deps : bootblock빌드시 디펜던시들
      classes : coreboot class들(ex. bootblock, ramstage ...)
    주요함수들
      evaluate_subdirs, includemakefiles : 하위 디렉토리 Makefile.mk(or .inc)를 include
      src-to-obj : *-objs값(ex. bootblock-objs)을 세팅
      create_cc_template : 빌드룰을 생성하는 매크로를 생성. 생성된 매크로는 이후 foreach-src함수에서 호출되어 소스파일별 빌드룰이 생성됨!
      generic-objs_ld_template_gen : create_cc_template과 동일 역할. 단, 얘는 .c->.o가 아닌 .ld파일(링커스크립트) preprocessing 룰.
  bootblock이미지(bootblock.bin)은 다음의 step에 따라서 생성
    bootblock-objs를 빌드 -> $(objcbfs)/bootblock.debug,$(objcbfs)/bootblock.map -> $(objcbfs)/bootblock.elf -> $(objcbfs)/bootblock.raw.elf -> $(objcbfs)/bootblock.raw.bin -> $(objcbfs)/bootblock.bin
      bootblock-objs빌드 make룰 : $(top)/Makefile에서 생성(line 410-418참조)
      $(objcbfs)/bootblock.debug make룰: $(top)/src/arch/x86/Makefile.mk에서 생성(line 97-101 참조)
         링크시 사용되는 linker script는 다음과 같음.($(top)/Makefile.mk line 257-264 참조)
          $(top)/build/bootblock/arch/x86/memlayout.ld
          $(top)/build/bootblock/arch/x86/bootblock.ld
          $(top)/build/bootblock/lib/program.ld
        생성된 bootblock img(ELF) 주요정보는 다음과 같음.(readelf -hlS $(top)/build/cbfs/fallback/bootblock.debug 참조)
         section정보
           .text : bootblock image의 대부분 코드들이 포함되는 영역
                     시작주소(VMA) : 0xffffd000
           .init : .init 코드들이 포함되는 영역
                      시작주소(VMA) : 0xfffffeb0
           .id : .id 가 포함되는 영역
                   시작주소(VMA) : 0xffffffba
           .reset : 최초 실행되는 코드가 포함된 영역
                      시작주소 : 0xfffffff0
         segment정보
             2개의 segment가 존재
             #1 segment : .text, .init, .id, .reset 등 주요 섹션이 포함        
             #2 segment : ?

       그 외 make룰 : $(top)/Makefile.mk에 기술(line 822-867 참조)
  생성된 bootblock이미지가 최종 결과물 coreboot.rom에 포함됨.!
    $(obj)/Makefile.mk line 1209 참조

$(top)/Makefile
coreboot top level Makefile.
line86
  goal target : target은 all임. (line 86)
    디펜던시는 다음과 같음: all <- real-all <- real-target
line114
  NOCOMPILE variable이 1인 경우 빌드수행X임. NOCOMPILE = 1은 config파일이 없거나 하는 경우 세팅 됨.  
line 207-209
  toolchain.mk 포함(빌드에 사용할 컴파일러,링커 등의 정보가 세팅됨)
line 286-324
  includemakefiles, evaluate_subdirs make function/variable로 Makefile.mk, Makefile.inc들을 include함.
    coreboot TOPLEVEL directory부터 subdir들로 순회.
    subdir은 includemakefiles function에 의해 채워짐. => */Makefile.mk파일에 subdirs-y 변수에 정의되어있음.
    includemakefiles 분석(bootblock 분석에 필요한 부분 위주)
      $(class)-y(ex. bootblock-y) 변수 초기화
      include Makefile.mk(or Makefile.inc) 수행
      $(class)-srcs, $(class)-objs, classes 변수 초기화 (ex. bootblock-srcs, bootblock-objs)
       스페셜클래스추가수행
      $(class)-srcs 변수에 빌드할 소스파일경로들 추가.(각 디렉토리의 Makefile.mk에 기술된 $(class)-y 변수에 명시됨!)
      subdirs추가수행(여기 추가된 subdir로 하위트리에 대해서 includemakefiles 재반복하게 됨, BFS 탐색인 듯~)
      includemakefiles 수행은 모두 toplevel경로 기준으로 한다고 보면 될 듯.(abspath make function을 사용함!)
    참고. make printall로 bootblock-objs 변수값 확인 가능.! * 이 외에 다른 make target으로 빌드 디버깅에 도움될 듯함.
    참고. 각 디렉토리 내부의 Makefile.mk(or .inc) 와 내부의 bootblock-y, subdir 변수 위주로 보면 현재 Kconfig에 따라 bootblock에 포함되는 소스를 파악할 수 있음!(make log나... 이런것들에서도 아마도 확인 가능할 것 같긴함)
line 360
  $(class)-objs 값을 세팅. (by src-to-obj function)
    $(class)-objs = $(class)-srcs 라고보면 됨. 
    즉 bootblock-objs의 경우, bootblock-srcs값에서 suffix(=확장자)를 변경(ex. .c -> .o)
    directory경로를 변경(ex. ./src -> $(obj)/bootblock 로 변경.)
line 410-418
  object빌드를 위한 rule을 생성.
  create_cc_template으로 rule생성 매크로를 먼저 만들어낸 후,
    각 class별로 각 소스파일확장자별 컴파일옵션 $(calss)-$(type)-ccopts / 디펜던시 $(class)-$(type)-deps를 선언한 변수가 있고, 
    해당 변수들은 directory Makefile.mk(or .inc)에 기술되어있음.(includemakefiles에 의해서 세팅)
      ex. bootblock-generic-ccopts, bootblock-S-ccopts(컴파일옵션), bootblock-generic-deps
    create_cc_template에 의해서 $(class)-objs_$(type)_template형태의 매크로(인자는 소스파일!)가 생성됨.!
      ex. bootblock-objs_c_template
       인자는 소스파일로 전달받아, 해당 소스파일을 빌드하여 오브젝트를 생성하는 룰을 만든다.
  이후 foreach-src으로 create_cc_template에 의해 생성된 매크로를 사용하여 룰을 생성함.
    각 class별 소스파일에 대해서 create_cc_template에 의해 생성된 매크로를 호출하여 실제 룰이 생성됨.!
  *create_cc_template 외에 generic-objs_ld_template_gen 같은 다은 매크로들도 동일한 방식으로 사용함!
  
$(top)/Makefile.mk
coreboot root make rule들이 존재하는 Makefile. ($top)Makefile에서 참조된다(include됨)
line 62
  real-target에 대한 make rule 기술되어있음
    prerequisites
      $(obj)/config.h : kconfig 설정값. $(top)/Makefile line 228에 생성 룰이 존재함.
      coreboot : coreboot image생성
      files_added : misc prerequisites
      show_coreboot : coreboot rom정보를 보여줌(cbfs tool로 coreboot rom정보를 출력함)
      show_notices : warning을 출력 if necessary.
line 63
  coreboot 에 대한 make rule이 기술되어있음 *recipie는 empty임. prerequisites만 기술됨.
    주요 prerequisites *coreboot.rom만 bootblock나올때까지 먼저 파는게 좋겠다.(일단 나머지 프리리퀴짙들은 모두 skip해도될듯)
      $(obj)/coreboot.rom : coreboot 최종 이미지 파일
      $(obj)cbfstool : CBFS manipulation tool
      
line 97-117
  subdirs-y로 하위 디렉토리 트리에 대해서도 빌드에 포함되도록 함

line 121
  classes-y 변수세팅 bootblock도 여기 들어감. 해당 변수는 ($top)/Makefile 에서 참조됨(includemakefiles 내용 참조)

line 257-264
  linker script preprocessing make rule을 만드는 macro function(generic-objs_ld_template_gen)
    conditional statement(ex. #ifdef ...) 및 constant(ex. #define ALIGN~~~) 에 대한 preprocessing이 이루어 짐.
  $(top)/Makefile에서(line 411 참조) called 됨.
  bootblock관련 linker script는 아래 3가지가 존재함.
    $(top)/src/arch/x86/memlayout.ld : top-level linker script. 아래 bootblock.ld linker script를 include함.
    $(top)/src/arch/x86/bootblock.ld : 2nd-level linker script. 아래 program.ld linker script를 include함.
    $(top)/src/lib/program.ld : 3rd-level linker script
  위 linker script는 아래 생성된 rule을 통해 preprocessed된 아래 최종 linker script를 사용함.
    $(top)/build/bootblock/arch/x86/memlayout.ld
    $(top)/build/bootblock/arch/x86/bootblock.ld
    $(top)/build/bootblock/lib/program.ld
  linker script preprocessing을 위한 rule은 다음과 같음(make -p option출력 참조). *으로 preprocessing만(옵션. -E -P -xassembler-with-cpp -undef -I. PREPROCESS_ONLY make variable임) 수행함!
  35081         @printf "    CP         $(subst $(obj)/,,$(@))\n"
  35082         /home/knw/Desktop/Study/coreboot/coreboot/src/coreboot/util/crossgcc/xgcc/bin/i386-elf-gcc -MMD -Isrc -Isrc/include -Isrc/commonlib/include -Isrc/commonlib/bsd/include -Ibuild -I3rdparty/vboot/firmware/include -include src/include/kconfig.h -include src/include/rules.h -include src/commonlib/bsd/include/commonlib/bsd/compiler.h -I3rdparty -D__BUILD_DIR__=\"build\" -D__COREBOOT__ -Isrc/arch/x86/include -D__ARCH_x86_32__ -D__BOOTBLOCK__ -E -P -x assembler-with-cpp -undef -I. -include build/config.h -MT $@ -o $@ $<

line 822 - 867
  $(objcbfs)/bootblock.bin을 생성하기 위한 rule들이 기술되어있음.
  Kconfig 설정(CONFIG_COMPRESS_BOOTBLOCK)에 따라 사용되는 룰이 다름.
  $(objcbfs)/bootblock.bin이 생성되는 과정(Kconfig CONFIG_COMPRESS_BOOTBLOCK n인 경우)은 아래와 같음.
    ->  $(objcbfs)/bootblock.debug,$(objcbfs)/bootblock.map -> $(objcbfs)/bootblock.elf -> $(objcbfs)/bootblock.raw.elf -> $(objcbfs)/bootblock.raw.bin -> $(objcbfs)/bootblock.bin
    bootblock.debug의 경우, ./src/arch/x86/Makefile.mk 에서 룰이 정의되어있음(line 97- 참조)

line 1164 - 1196
  fmap파일(fmap.desc, fmap.fmap) 생성 rule들.
    fmap.fmap : FLASHMAP Descriptor(=fmap.fmd)를 컴파일한 FLASHMAP binary 데이타.
    fmap.desc : FMAP에서 CBFS section들의 이름.
    *FMAPTOOL output 참조
    *fmap파일은 FMAPTOOL 을 사용하여 생성됨.
  CONFIG_FMDFILE(Kconfig)가 설정되었다면(=사용할 FMAP Descriptor파일path가 명시됨), 해당파일을 사용, 아니면 default FMAP Descriptor를 사용함. (line 1011참조)
  최종 FMAP descriptor(=fmap.fmd)는 base FMAP Descriptor(=DEFAULT_FLASHMAP variable)의 keyword(ex. ##ROM_BASE## ...)를 Makefile에서 세팅한 값(line1027-1160 참조)으로 대체하여 생성됨. 
  최종 FMAP descriptor를 컴파일(by FMAPTOOL)하여 fmap.fmap파일과, fmap.desc, fmap_config.h가 생성됨.
 
line 1209-
  coreboot.pre rule기술. Kconfig 설정(CONFIG_UPDATE_IMAGE)에 따라 룰이 달라짐.
  생성 rule 로직은 다음과 같음
    coreboot.pre.tmp 파일을 fmap정보에 기반하여 생성(using CBFSTOOL)
    $(objcbfs)/bootblock.bin를 CBFS에 추가(line 1201참조 *CBFSTOOL로 bootblock을 write함)
    CBFS에 파일들 추가.(by prebuild-files 함수 call)
    coreboot.pre.tmp => coreboot.pre로 rename
  coreboot.pre의 주요 prerequisites
    CBFSTOOL : cbfstool
    $(obj)/fmap.fmap : FMAP 정보
    $(obj)/fmap.desc : FMAP의 CBFS section 목록(text)
    $(objcbfs)/bootblock.bin : bootblock img

line 1243-
  coreboot.rom 생성을 위한 rule.
  생성 rule 로직은 다음과 같음.
    empty coreboot.rom 임시파일생성(dd command 사용)
    empty coreboot.rom 임시파일에 coreboot.pre를 write(dd comamnd 사용)
    coreboot.rom 임시파일의 이름을 coerboot.rom으로 변경
    coreboot.rom파일 정보 출력(using CBFSTOOL)
    주요 prerequisites
      $(obj)coreboot.pre
      CBFSTOOL
  최종 생성된 coreboot.rom 구조는 다음과 같음.
    FMAP에 맞춰서 데이터가 위치하게 됨
      FMAP section : FMAP정보들이 존재.
      COREBOOT section : COREBOOT CBFS데이타들이 존재.
    상세
./build/cbfstool ./build/coreboot.rom print *cbfstool의 print 옵션으로 확인가능.
FMAP REGION: COREBOOT  => FMAP의 COREBOOT(in CBFS) section 내용을 출력.
Name                           Offset     Type           Size   Comp
cbfs_master_header             0x0        cbfs header        32 none
fallback/romstage              0x80       stage           17024 none
fallback/ramstage              0x4380     stage           61723 LZMA (126316 decompressed)
config                         0x13500    raw              2017 LZMA (5961 decompressed)
revision                       0x13d40    raw               703 none
build_info                     0x14040    raw                97 none
fallback/dsdt.aml              0x14100    raw              4044 none
cmos_layout.bin                0x15100    cmos_layout       640 none
fallback/postcar               0x153c0    stage           21472 none
fallback/payload               0x1a800    simple elf      43491 none
(empty)                        0x25240    null          4029284 none
bootblock                      0x3fcdc0   bootblock       12288 none => bootblock이 제일 마지막에 위치함.

hexdump -C ./build/coreboot.rom | more 
00000000  5f 5f 46 4d 41 50 5f 5f  01 01 00 00 c0 ff 00 00  |__FMAP__........|  => coreboot.rom은 FMAP section(struct fmap, struct fmap_area list)으로 시작됨
00000010  00 00 00 00 40 00 46 4c  41 53 48 00 00 00 00 00  |....@.FLASH.....|
00000020  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000030  00 00 00 00 00 00 03 00  00 00 00 00 00 00 40 00  |..............@.|
00000040  42 49 4f 53 00 00 00 00  00 00 00 00 00 00 00 00  |BIOS............|
00000050  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000060  00 00 00 00 00 00 00 02  00 00 46 4d 41 50 00 00  |..........FMAP..|
00000070  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000080  00 00 00 00 00 00 00 00  00 00 00 00 00 02 00 00  |................|
00000090  00 fe 3f 00 43 4f 52 45  42 4f 4f 54 00 00 00 00  |..?.COREBOOT....|
000000a0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
000000b0  00 00 00 00 00 00 ff ff  ff ff ff ff ff ff ff ff  |................|
000000c0  ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff  |................|
...
00000200  4c 41 52 43 48 49 56 45  00 00 00 20 00 00 00 02  |LARCHIVE... ....|  => COREBOOT section시작. master header componet. *master header가 bootblock에 들어있댔는데 아닌 듯.(바뀐듯?)
00000210  00 00 00 00 00 00 00 2c  63 62 66 73 5f 6d 61 73  |.......,cbfs_mas|  
00000220  74 65 72 5f 68 65 61 64  65 72 00 00 4f 52 42 43  |ter_header..ORBC|
00000230  31 31 31 32 00 40 00 00  00 00 00 04 00 00 00 40  |1112.@.........@|
00000240  00 00 02 00 ff ff ff ff  00 00 00 00 ff ff ff ff  |................|
00000250  ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff  |................|
...
003fcfc0  4c 41 52 43 48 49 56 45  00 00 30 00 00 00 00 01  |LARCHIVE..0.....|  => bootblock component
003fcfd0  00 00 00 00 00 00 00 40  62 6f 6f 74 62 6c 6f 63  |.......@bootbloc|
003fcfe0  6b 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |k...............|

*처음에는 FMAP section에 struct fmap, struct fmap_area정보가 있고 이 이후 COREBOOT section(위 출력)이 위치함을 알 수 있다.

$(top)/toolchain.mk
  빌드에 사용할 toolchain(ex. 컴파일러, 링커) 정보 세팅.
  ex. x86 arch의 경우 (make -p 출력 참조)
    CC_x86_32 := /home/knw/Desktop/Study/coreboot/coreboot/src/coreboot/payloads/coreinfo/../../util/crossgcc/xgcc/bin/i386-elf-gcc
    LD_x86_32 := /home/knw/Desktop/Study/coreboot/coreboot/src/coreboot/payloads/coreinfo/../../util/crossgcc/xgcc/bin/i386-elf-ld.bfd
    ...
  세팅된 toolchain 정보들은 각 stage별 compiler정보(ex. CC_bootblock, LD_bootblock, ...) 에 세팅되어 사용됨.(init_stages, create_class_compiler함수 참조)

line 171
  init_stages 함수 호출.(default toolchain정보를 세팅함.)
    아래 class에 대해서 default toolchain을 세팅함.
      decompressor bootblock verstage romstage ramstage
    
$(top)/src/arch/x86/Makefile.mk
line 57-67
  early_x86_stage함수
  x86 arch의 각 class별(ex. bootblock, verstage ...) .debug 파일 빌드를 위한 룰 생성하는 함수
  class별 사용할 컴파일러/링커는 $(top)/toolchain.mk의 init_stages 함수에 의해 세팅됨.
  bootblock일 경우 아래 룰이 생성된다고 볼 수 있음.(make -p 출력 참조, CONFIG_ARCH_BOOTBLOCK_X86_32 == 'y' 인 경우.)
    #recipe to execute (from 'src/arch/x86/Makefile.mk', line 98):
    @printf "    LINK       $(subst $(obj)/,,$(@))\n"
    $(LD_bootblock) $(LDFLAGS_bootblock) -o $@ -L$(obj) $(COMPILER_RT_FLAGS_bootblock) --whole-archive --start-group $(filter-out %.ld,$(bootblock-objs)) $(bootblock-libs) --no-whole-archive $(COMPILER_RT_bootblock) --end-group -T build/bootblock/arch/x86/memlayout.ld --oformat elf32-i386
    사용되는 링커스크립트는 빌드config시 설정된 Kconfig값(CONFIG_MEMLAYOUT_LD_FILE)를 preprocessing하여 사용함($(top)/Makefile.mk line 257 참조.)
      CONFIG_MEMLAYOUT_LD_FILE=src/arch/x86/memlayout.ld

line 75-93
  x86 arch관련 포함 될 bootblock 소스코드 세팅(=bootblock-y 변수세팅)

line 97-101
  bootblock.debug 생성 Make rule 생성(early_x86_stage 함수사용)

CBFS *$(top)/Documentation/cbfs.txt 참조
  CBFS 개념
    system ROM에, 서로 독립적인 data chunk들을 관리하기 위한 filesystem.
     실제 filesystem(ex. ext4와 같은)은 아니지만, concept은 비슷.
     구성 diagram(from cbfs.txt)
 91 /---------------\ <-- Start of ROM
 92 | /-----------\ | --|
 93 | | Header    | |   |
 94 | |-----------| |   |
 95 | | Name      | |   |-- Component
 96 | |-----------| |   |
 97 | |Data       | |   |
 98 | |..         | |   |
 99 | \-----------/ | --|
100 |               |
101 | /-----------\ |
102 | | Header    | |
103 | |-----------| |
104 | | Name      | |
105 | |-----------| |
106 | |Data       | |
107 | |..         | |
108 | \-----------/ |
109 |               |
110 | ...           |
111 | /-----------\ |
112 | |           | |
113 | | Bootblock | |
114 | | --------- | |
115 | | Reset     | | <- 0xFFFFFFF0
116 | \-----------/ |
117 \---------------/
    각 Component들은 metadata(header, Name) + 실제data 로 ROM에 구성.
    각 Component들은 순서대로 boundary에 aligned되어 ROM에 구성.
    Bootblock component만 제일 마지막에 위치(최대 20KB만큼만 차지.)
    Bootblock component에는 ROM의 정보를 담고있는 Master Header정보(ex. 각 component들의 크기, alignment, offset)가 포함되어있다.
  
  *원래 다른 포맷(LAR??? maybe)이었는데, 이거 구현한 사람의 상황이 바뀌면서 컴파일만 된 수준으로 구현하고, 나머지를 맡긴다라는 메일쓰고 계속 발전한 듯. ㅎ

FMAP(flashmap) *$(top)/Documentation/lib/flashmap.md 참조
  FMAP(=Flash Map)개념
    flash chip에서의 데이타(=이미지, ex. CBFS) 파티션(=section)을 기술한 binary format.
     즉, flash chip 내에서의 각 데이타들을 파티셔닝하고, 정확한 위치를 기술함.
    flashmap은 아래의 구조를 가짐.(struct fmap을 시작으로, struct fmap_area 목록들이 뒤따름)
      struct fmap : FMAP의 헤더
      struct fmap_area : 각 section 정보를 기술
      strcut fmap_area
      ...
    주요 section
      FMAP section : flashmap 데이타(struct fmap and list of struct fmap_area)가 포함된 section
      COREBOOT section : coreboot 이미지(coreboot.rom)이 포함된 section
    Flashmap Descriptor(=FMD)
      FMAP을 기술하는 language
       해당 language을 컴파일하는 별도 compiler가 있음.(coreboot source tree에 존재!)
    *원래는, coreboot에서는 ChromiumOS firmware를 위해서 사용되었음.

=====================2. bootblock 로직=================================
전체개요
  linker script(.ld파일)에 의해서 소스파일들이 하나의 bootblock image로 생성된다.(상세내용은 위 1.bootblock 빌드과정 참조)
  $(top)/src/cpu/x86/reset16.S 부터 첫시작(x86 reset시 초기실행되는 명령어가 해당 소스파일에 기술되어있다.)
  bootblock 구동 순서
    각 단계마다 POST code출력 및, BIST결과를 전달함.
    real-mode
      protected-mode준비(gdt, idt를 로드, 인터럽트 초기화 등을 수행)
       이후 protected-mode로 전환!
       관련소스 : $(top)/src/cpu/x86/reset16.S, $(top)/src/cpu/x86/entry16.S
    protected-mode
      아직 paging은 사용하지 않음
      최종적으로 romstage를 load하여 실행하게 됨.
      관련소스 : $(top)/src/cpu/x86/entry32.S 및 각종 .c 코드들!
      
$(top)/build/bootblock/arch/x86/memlayout.ld
  bootblock top-level linker script
  bootblock.ld, car.ld linker script파일을 include함
  *$(top)/src/arch/x86/memlayout.ld 를 preprocessing한 파일임($(top)/Makefile.mk line 257- 참조)
line 1-5
  program header정의
  2개의 loadable segment를 정의함.
line 6
  ENTRY symbol정의 (_start)
line 7
  bootblock.ld파일 include
line 8-11
  car.ld 파일 include
  
$(top)/build/bootblock/arch/x86/bootblock.ld
  bootblock main linker script라 볼 수 있음.
  program.ld 를 INCLUDE함.
  bootblock image내 section들에 대한 layout을 기술.($(top)/build/cbfs/fallback/bootblock.debug ELF파일 참조하면 됨.)
    주요section : .init, .id, .reset + program.ld의 output section(=.text)

line 1-2
  gdt, idt offset value를 정의. 링커스크립트 내부에서는 사용하지 않고, 링크되는 소스파일에서 사용됨.(grep으로 search하면 됨)
line3-49
  output section할당.
  주요 output section은 다음과 같음
    .init, .id, .reset + 외부 linker script에 정의된(ex. program.ld)output section들.
    
  line4-9
    $(top)/build/bootblock/lib/program.ld 에 기술된 output section의 location counter를 setting하고 할당함.(by INCLUDE)
    
    주요 symbol값은 다음과 같음.
    _bootblock : 0xffffd000. program.ld output section의 시작 주소.
    BOOTBLOCK_TOP : 0xfffffeb0 .init section이 시작되는 주소.
    PROGRAM_SZ : 0x00002820. bootblock의 .text, .data section의 사이즈

  line13-17
    .init output section을 할당.
    input section이 .init 으로 시작한다면 모두 해당 section으로 할당된다.
      포함되는 소스코드(grep -r '\.section'  | grep init 참조)
       $(top)/src/arch/x86/walkcbfs.S
       $(top)/src/arch/x86/gdt_init.S
       $(top)/src/cpu/x86/entry16.S
       $(top)/src/cpu/x86/entry32.S
    section의 시작주소는 0xfffffeb0
  line 18-22
    .id output section을 할당.
    input section이름이 .id 이면, 모두 해당 section으로 할당된다.
      포함되는 영역(grep -r '\.section'  | grep id 참조)
       $(top)/src/arch/x86/id.S
    section의 시작주소는 0xffffffba
  line 36-42
    .reset output section을 할당
    input section이름이 .reset 이면, 모두 해당 section으로 할당된다.
      포함되는 영역(grep -r '\.section'  | grep reset 참조)
       $(top)/src/cpu/x86/reset16.S
    section의 시작주소는 0xfffffff0

$(top)/build/bootblock/lib/program.ld
.text output section을 기술한다.
line 1-24
  .text output section 기술.
  해당 section은 to_load program segment에 할당됨.
  이 후에 나오는 다른 output section(ex. .init, .id, .reset. *bootblock.ld참조)도 to_load segmenet에 할당됨.(먼저나오는 .text section에 to_load program segment 할당으로 명시되었으므로...)

$(top)/src/cpu/x86/reset16.S
line 5-6
  _start symbol 정의
line 7-8
  _start16bbit symbol로 jmp하는 instruction.($(top)/src/cpu/x86/entry16.S 참조)  

$(top)/src/cpu/x86/entry16.S
각종 초기화 작업들을 수행함.
line 43-55
  interrupt flag clear
  BIST result를 저장.
    BIST : Built In Self Test, machine의 self-test를 허용하는 mechanism.
    BIST의 결과는 x86 arch에서는 %eax reg에 저장된다.(Intel 64 and IA-32 Architectures Software Developer's Manual, Volume 3 9.1.2 참조.)
     어떤 mechanism으로 %eax reg에 저장되는지는 ?임.
  POST code(reset_vector_corrext(0x01))을 IO_PORT로(0x80)출력.(post_code()는 $(top)/src/include/cpu/x86/post_code.h 참조. #define되어있음)
    POST code는 coreboot에서 정의된 값들임.($(top)/src/commlonlib/include/commonlib/console/post_codes.h 참조)
    POST : Power On Self Test, system power on시, firm/software에 의해 실행되는 루틴임.
             주로 시스템 초기화작업을 하고, 
             필요시, 발생한 error code를 외부장치(ex, screen, speaker, etc...)로 출력함
            wikipedia참조
  cr3 reg clear(=invalidate TLB for preventing false address translation)

line 107-114
  초기 idt, gdt를 세팅함.
  idt의 경우, 방어코드느낌 으로 보여지긴함.(nullidt를 load함으로써, unexpected한 비정상동작을 막기 위함인듯... 주석도 참고)
  gdt는 $(top)/src/arch/x86/gdt_init.S에 정의되어있음.
  *참고. Intel 64 and IA-32 Architectures Software Developer's Manual, Volume 3, 9.10참조

line 128-132
  cr0 register 세팅(세팅하는 flag는 주석 참조)
    CR0 : Contains system control flags that control operating mode and states of the processor.
    segmentation을 on 한다.(=protected mode를 사용하겠다는 의미)

line 136
  BIST result를 eax에 restore.

line 139
  protected mode jump수행.(to bootblock_protected_mode_entry)

$(top)/src/cpu/x86/entry32.S
line 32
  BIST value save

line 34
  POST code 출력(enter_protected_mode)

line36-42
  segment register 세팅(ROM_DATA_SEG로. cs는 별도로 세팅안함!(코드 실행하기 전에 수행됨($(top)/src/cpu/x86/entry16.S line 139참조)))

line 45
  BIST value restore

line 57-67
  BIST value를 mmx register mm0에 세팅
  timestamp를 읽어서(rdtsc), mmx register(mm1, mm2)에 세팅

line 77
  jump to bootblock_pre_c_entry.

$(top)/src/cpu/qemu-x86/cache_as_ram_bootblock.S
line 18
  post code출력(bootblock_car) 

line 26-31
  CAR 영역 clear

line 76-79
  stack pointer 세팅

line 93-101
  이전에 읽었던 BIST value와, timestamp값을($(top)/src/cpu/x86/entry32.S line57-67참조) ebx, eax, edx에 세팅.
  이후 각각을 stack에 밀어넣음.(calling convention에 따라 파라미터 전달을 위함.)

line 105
  .data section데이터를 CAR영역으로 copy($(top)/src/cpu/x86/copy_data_section.inc 참조)

line 107-108
  call to bootblock_c_entry_bist

$(top)/src/cpu/qemu-x86/bootblock.c
line 9
  post code출력

line 11-15
  BIST 결과 출력
  BIST 결과가 failuer라면 system halt발생.

line 18
  call bootblock_main_with_basetime()
  
$(top)/src/lib/bootblock.c
line 29-69
  bootblock_main_with_timestamp()
  timestamp를 업데이트하고,
  soc, mainboard, console등 h/w 초기화를 수행.
    bootblock_soc_*_init(), bootblock_main_*_init()은 qemu환경에서는 nop임.!
  이후 romstage를 실행(via run_romstage())

line 71-74
  call bootblock_main_with_timestamp()만 수행.

$(top)/src/lib/timestamp.c
line 28-42
  timestamp_cache_get()
  timestamp 캐시영역을 return
  timestamp 캐시영역
    linker script에 의해 정의됨. *$(top)/build/bootblock/arch/x86/car.ld 참조!
    timestamp를 관리하는 정보가 담기는 영역(ex. timestamp entry들)

line 104-118
  timestamp_add_table_entry()
  timestamp_entry를 추가한다.

line 120-139
  timestamp_add()
  timestamp entry를 추가한다.

line 146-164
  timestamp_init()
  timestamp 캐시영역을 초기화 수행.

line 285-296
  timestamp_get()
  elapsed 시간(기준은 가장최근 시간정보를 얻어왔을때부터 ~ 현재)을 계산하여 retrun함. 단위는 usec
  low하게는 TSC(Time-Stamp-Counter)를 사용한다.

$(top)/src/console/init.c
line 49-68
  console_init()
  if조건문은 모두 false(config가 off임)이므로 아래 2가지 함수만 실행된다.
    init_log_level()
    console_hw_init()
  loglevel을 세팅하고(init_log_level())
  console h/w를 초기화함(console_hw_init())
  qemu의 경우, 단순하게 특정 i/o address(CONFIG_CONSOLE_QEMU_DEBUGCON_PORT)를 read하여 detect하고, 콘솔출력도 해당 address로 쏘는 듯.(qemu_debugcon_init, qemu_debugcon_tx_byte)
    =어쨋든 다른 consoel h/w도 h/w를 직접 control하여 초기화, 콘솔출력을 수행한다.

$(top)/src/arch/x86/exception.c
line 379-562
  x86_exception()
  line 526-560 *conditional빼면 실제 실행되는건 요기만
    CPU register, instruction, stack 덤프를 찍고
       해당정보들은 인터럽트 발생시 stack에 저장된 레지스터,vector,errorcode 값을 보여주는 것으로 보면 됨.!($(top)/src/arch/x86/idt.S 참조)
    die(=hlt instruction)수행함.
    
line 592-598
  각 IDT entry에대한 handler offset 배열
  INT 0 ~ 19까지만 정의
  각 인터럽트에 대한 프로시져분석은 $(top)/src/arch/x86/idt.S를 참조.

line 647-668
  exception_init()
  IDT를 초기화하고 load함!(int 0~19까지만)

$(top)/src/arch/x86/idt.S
line 9-109
  INT 0~19
  interrupt vector(number)를 스택에 push후, jmp int_hand 수행.
  *error code를 push하는 vector가있고 아닌게있는데, 이건 인터럽트 발생 시, error code를 안넣어주는 vector만 0을 수동으로 push함.(아마 stack frame모양 똑같이 갖추기 위함일 듯.)
  *Intel 64 and IA-32 Architectures Software Developer's Manual, Volume 3, 6.3 테이블 참조.

line 110-216
  int_hand
  실제 interrupt handler.
  line 182-192
    prologue
  line 194-203
    call x86_exception()
  line 205-215
    epilogue
    *esp = esp+8은, vector, errorcode를 stack에서 pop하기위함임. iret을 정상동작하게하기위함.! 
  *Intel 64 and IA-32 Architectures Software Developer's Manual, Volume 3, 6.12참조

$(top)/src/lib/prog_loaders.c
line 18-53
  run_romstage()
  romstage를 load(by cbfs_prog_stage_load())
  이후 load한 romstage를 call(by prog_fun())
  line 20-25 
    현재 config에서는 실행되지 않는 로직
  line 30
    현재 config에서는 실행되지 않는 로직
  line 32
    ROM copy start timestamp 출력
  line 37-40
    romstage정보를 load(by cbfs_prog_stage_load())
    *line 34-37은 현재 config에서는 실행되지 않는 로직
  line 42-44
    ROM copy end timestamp 출력
    console관련 timestamp 출력
  line 46
    romstage 실행(by prog_run())
  line 48-53
    비정상종료로직을 수행

$(top)/src/lib/prog_ops.c
line 25-29
  prog_run()
  program(ex. romstage)를 실행시킨다.(by arch_prog_run)
  *platform_prog_run 은 nop

$(top)/src/arch/x86/boot.c
line 22-40
  arch_prog_run()
  line 35-38
    program의 entry를 call수행(=실행시킨다.)
  *ENV_* 매크로는 컴파일러 옵션(ex. -D__ROMSTAGE__ 에 따라서 세팅된다)  

$(top)/src/lib/cbfs.c 
line 552-615
  cbfs_prog_stage_load()
  CBFS compoent를 찾고, CBFS component의 정보를 통해 struct prog를 세팅 및 CBFS component를 적절한 위치(loadaddr)에 load한다.
    romstage의경우,
      loadaddr : 0x00000000ffc00300 *CBFS에서는 bigendian임(0x0003c0ff00000000)
      entryoffset : 0x00000031 *CBFS에서는 bigendian임(0x31000000)
       실제 entry offset = loadaddr + entryoffset = 0xffc00331
      *loadaddr, entryoffset는 big-endian -> host endianess(little-endian)로 변환됨.(거꾸로 뒤집음)
      *loadaddr, entryoffset은 cbfstool에 의해서 세팅된다.(memo_romstage 8단계 내용 참조)
       *위 값들이 각각 prog->start(loadaddr), prog->entry(실제 entry offset)에 세팅됨. *little-endian으로 변환됨.
      *coreboot.rom에서 fallback/romstage을 load함.($(top)/build/cbfs/fallback/romstage.elf파일)

  line 558
    사실상 nop(prog_locate_hook)
  line 560-578
    cbfs component 정보를 찾고(by cbfs_boot_lookup)
    struct prog 각 필드에 값을 세팅함.(ex. cbfs_type, compression type, stageheader, program start, program size, program entry)
  line 603
    cbfs data를 적절한위치(cbfs stageheader에 명시된)로 load한다.
  line 608-611
    마무리리 로직을 수행.(ex. 잔여 메모리 영역 clear)
    prog_segment_loaded는 사실상 nop

*참고. x86 arch에서 시스템 boot 시(=RESET), 최초로 실행되는 코드
  linear address로(logical -> linear로 변환 된) 0xFFFFFFF0 가 최초실행되는 주소.(Intel 64 and IA-32 Architectures Software Developer's Manual, Volume 3 9.1.4 참조). *paging은 off인 상태이므로, 해당 주소가 곧 physical address이기도 함.(=즉, physical address spcae 0xFFFFFFF0에 첫번째 명령어가 위치해야 한다)
  참고. x86 arch의 RESET시의 CPU최초상태(=Real Address Mode)는 Intel 64 and IA-32 Architectures Software Developer's Manual, Volume 3 9.1.1 참조
  참고.Real Address Mode내용은 Intel 64 and IA-32 Architectures Software Developer's Manual, Volume 3 20.1 참조.
  참고. logical address vs linear address vs physical address
    logical address space : 하나의 segment 의 주소 영역.
                            segmentation을 통해서 linear address space로 매핑됨.(linear address space내 해당 segment의 영역의 주소로 매핑)
    linear address space : processor가 사용가능한 주소 영역.
                           segment들로 나뉘어져있음.
                           pagination을 통해서 physical address space로 변환 (physical address space내 해당 linear address space 영역의 주소로 매핑)
    physical address space : physical 메모리의 주소 영역.
                             page들로 나뉘어져 있음.(이건 optional)
    logical address ->(segmentation) linear address ->(pagination) physical address로 변환됨.
     참고. linear -> physical address 변환 시, paging이 없을 수 있음. 이 때는 linear - physical 1:1 mapping
     참고. segmentation은 무조건 사용되어야 함, paging은 enable/disable 가능
     참고. Intel 64 and IA-32 Architectures Software Developer's Manual, Volume 3 3.1 참조

*참고. linker script 관련
  symbol값 등 ELF정보들은 $(top)/build/cbfs/fallback/bootblock.debug 파일에 대해 readelf, nm command등을 사용하면 됨.
  linker script에 정의된 symbol은 reference 이후 line에 정의되어 있어도 참조가 가능하다.!(ex. BOOTBLOCK_TOP symbol))
    => 순서대로 값이 세팅되는 것이 아니라, 필요할때 값이 계산되는 듯...(lazy evaluation) 개념은 안익숙하나 하여간... 그럼;
  input section : input file(=링크대상 파일들)에 존재하는 section.
  output section : output file(=링크된 결과파일)에 존재하는 section.
  linker script에 명시되지 않은 input section들은 명시된 output section 이후에 그대로 output section으로 copy됨.(DISCARD로 무시할 수 있어보임)

*참고. bootblock coreboot.rom binary data 분석
  hexdump -C $(top)/cbfs/build/coreboot.rom vs hexdump -C $(top)/build/cbfs/fallback/bootblock.bin 결과
    coreboot.rom의 0x003fcfc0 - 0x003fd000 범위(=CBFS header정보)이후, bootblock.bin데이터가 그대로 포함되어있음.(hexdump로 확인)
  
  bootblock마지막 영역 bytes 분석(hexdump -C $(top)/cbfs/build/coreboot.rom + objdump -D $(top)/build/cbfs/fallback/bootblock.debug 참조)
    003ffff0  e9 bd fe ff ff 66 90 66  90 66 90 00 2c 02 c0 ff  |.....f.f.f..,...|
      e9 bd fe ff ff : 최초실행명령어(=.reset section정보). ($(top)/src/cpu/x86/reset16.S 참조)
      66 90 66 90 66 90 00 : 알아서 적당히 채워진 영역(=nop으로 채워짐). 의미없어보임.
         테스트방법 test source(with .code16 directive) + test ld(with creating hole)파일을 사용하여, 16bit code로 컴파일(coreboot toolchain사용함)
        linker script에 특정 bytes로 FILL하도록 명시한 경우, 명시된 값이 사용. 아니면 nop으로 채워지는 듯.
      2c 02 c0 ff : .header_pointer section 정보($(top)/src/lib/master_header_pointer.c 참조)
  qemu monitor를 통해서 coreboot.rom 위치 디버깅한 내용
    info roms 출력결과가 다음 확인되며, 
     addr=00000000ffc00000 size=0x400000 mem=rom name="coreboot.rom"
   0xffc00000(coreboot rom load 시작주소) + 0x003ffff0(coreboot.rom에서 최초명령어의 위치) = 0xfffffff0(x86 최초명령어 실행주소) 으로 나옴을 확인 => 즉, qemu에서 bios를 알아서 잘 load해준다로 보면 될 듯!
    *참고. qemu monitor 접근방법
      qemu UI에서, Crtl+Atl+2 누르면 접근됨.

8단계(이것저것해보기) - 7단계 주요흐름에서 잘 이해안가던 내용들 파악(w/코드수정하면서 디버깅)
$(top)/src/cpu/x86/entry16.S
  gdt, idt, long jump detail한 내용 파악.(너무 대충만 알고, 정확한 의미 why? how?, 그에대한 effect를 잘 모름) 
  
  IDT
    IDT : Interrupt Descriptor Table
          16bit mode의 mechanism은, Intel 64 and IA-32 Architectures Software Developer's Manual, Volume 3 20.1.4를 참조. *real-mode vs protected-mode 인터럽트 처리 mechanism이 다름.
    lidt : IDTR(interrupt descriptor table register)에 IDT의 address와, size(in 6bytes) 정보를 load하는 instruction.
           real-mode에서도 lidt의 의미는 동일하다!(과거 cpu에서는 못바꿨다고는 하는 듯)
    
  GDT
    GDT : Glodbal Descriptor Table
          Logical address -> Linear address 로 변환하기위한 정보를 담고있음. => 즉, Segmentation을 수행한다.
          Segmentation mechanism은  Intel 64 and IA-32 Architectures Software Developer's Manual, Volume 3, 3.4 참조.
    lgdt : GDTR에 GDT의 address와, size(in 6bytes)정보를 load하는 instruction

    Segmentation 개요
     GDT를 세팅하고,
      각 segment register(ex. cs, ss, ds ...)에 segment selector를 load하면
     CPU가 GDT정보를 참조하여, instruction 실행 시, 적절한 segment register정보를 기반으로 Logical -> Linear 변환을 수행한다.     
     실제로, segment register는 아래 2 부분으로 나뉘어짐.
       visible part : segment selector정보(instruction으로 조작)
       hidden part : segment descriptor cache정보. *segment register 로드 시, cache한다.  descriptor수정시 re-load필요하며, 안하면 과거정보를 사용하게 된다.
     실제 사용되는 segment register는, processor가 선택함. Intel 64 and IA-32 Architectures Software Developer's Manual, Volume 1, 3.4.2 참조
       ex. processor가 instruction fetch시에는, cs register를 사용.(offset으로는 EIP를 사용)
           push, pop시 stack조작시에는 ss register를 사용.
           ...
  ljmpl
    ljmp : long jmp instruction
           syntax : ljmp $section, $offset’ gnu as doc 9.16.3.1 AT&T Syntax versus Intel Syntax 참조

$(top)/src/cpu/x86/entry32.S
  what is MMX?. timestamp를 mmx reg에 copy하는 이유와 effect를 모르겠다. 확인 필요.
    MMX : SIMD(single instruction multiple data) execution model을 지원하는 intel 기능임.
          SIMD를 수행하기 위한 MMX register(mm0 ~ mm7)과 instruction들(ex. PADD, MOVD, MOVQ ...)를 통해서 SIMD를 수행한다.
    timestamp를 mmx reg에 copy하는 특별한 이유는... 딱히 없어보인다.

$(top)/src/cpu/qemu-x86/cache_as_ram_bootblock.S
  CAR영역의 개념,목적,용도
    CAR : Cache-As-RAM
          CPU의 cache를 ram처럼 사용하기 위함. RAM이 초기화 되어있지 않기때문에.
          x86의 MTRR(Memory Type Range Register)를 사용하여 캐시를 램처럼 사용하는 것으로 보여진다. *$(top)/Documentation/acronyms.md 'CAR' 링크 참조
          *qemu-x86환경은, 경우는 CAR을 위해 별도로 특별한 작업을 수행할 것은 없다!(최상단 주석참고!)
    *MTRR 내용은 Intel 64 and IA-32 Architectures Software Developer's Manual, Volume 3, Chapter11 참조
          
$(top)/src/cpu/qemu-x86/bootblock.c
  __weak__ attribute 개념,목적,용도
    gcc에서 제공하는 attribute중 하나.
    ELF / a.out format에서만 지원하는 attribute.
    function / variable을 global이 아닌 weak symbol로 정의함.
    동일이름의 strong symbol이있으면, weak symbol을 overriding(=대체)한다.(동일이름 strong symbol 2개면 링크에러(multiple definition~) 발생!~)
      *strong symbol : 심볼이 weak attribute없이 정의하면 strong symbol.
    *__weak__, weak똑같은 의미임.(You may optionally specify attribute names with ‘__’ preceding and following the name. This allows you to use them in header files without being concerned about a possible macro of the same name, gnu gcc document 6.39. Attribute Syntax 참조!)
    *6.33.1. Common Function Attributes weak section 참조
    
  bootblock_c_entry_bist()함수 파라미터로 base_timestamp, bist 어떻게 넘어오는 지 확인
    calling convention에 따라서 전달받음.
    $(top)/src/cpu/qemu-x86/cache_as_ram_bootblock.S에서 스택으로 파라미터들을 전달해준다. (line 93-101)
    x86-32 calling convention(cdecl.)
    참고. bootblock_c_entry_bist()가 호출되었을 때의 스택프래임.
      -bottom- (higher address)
      ebx   +24 (+12) arg(BIST)      ====>  전달받은 파라미터
      edx   +20 (+12) arg(timestamp) ====>  전달받은 파라미터
      eax   +16 (+12) arg(timestamp) ====>  전달받은 파라미터
      edi   +12 (+12)
      esi   +8  (+12)
      ebx   +4  (+12)
      -top-    (lower address)

       bootblock_c_entry_bist()에서의 변수-cpu레지스터 매칭은 다음과 같음
         ebx : 파라미터로 전달받은 bist variable
         esi,edi : 파라미터로 전달받은 base_timestamp variable.

      *참고 objdump -D bootblock.elf 결과 참조
      *참고 스택프레임의 (+12)는 'esp = esp-0x0c' 이후의 esp(stack top)로부터의 offset은 +12만큼 더 늘어남을 의미.

$(top)/src/lib/bootblock.c
  timestamp routine분석
    $(top)/src/lib/timestamp.c 참조

  console, exception init분석
    $(top)/src/console/init.c 참조
    $(top)/src/arch/x86/exception.c 참조

  run_romstage분석
    $(top)/src/lib/prog_loaders.c 참조
    
*참고
  x86 asm syntax
    gnu as document참조!
    ljmp : long jmp instruction(=intel manual상으로는 far jump인 듯)
           syntax : ljmp $section, $offset’ 
            *gnu as doc 9.16.3.1 AT&T Syntax versus Intel Syntax 참조
    %cs:(%bx) : memory reference. code segment에서, %bx register의 값을 offset으로 참조. 
                *gnu as doc 9.16.7 Memory References 참조
    directive
      .word, .byte : ','로 각 word(2bytes), byte(1byte) 를 구분. 명시된 byte를 generate함.
      .global(=.globl) : symbol을 ld(linker script)에 visbie하도록 함.
    
9단계(유용한 것을 할수있는 수준까지 파기) - bootblock관련 이슈1개처리. bootblock관련 이슈 눈에띄는게 없으므로... 리팩토링해서 gerrit을 통해 코드리뷰 올려보자. 까이든 안까이든 크게 상관업슴. => bootblock이슈는 딱히 고칠만한건 없고(+guide에 단순한 리팩토링은 지양한다(prohibigted)라 되있어서) 패스. gerrit에 하나 올린걸로 9단계는 마무리합니다.
  gerrit에 Code PR 방법
    https://coreboot.org/developers.html Submiting patches 참조.
    https://doc.coreboot.org/tutorial/part2.html# 도 참조. 
    git push id/비번 : melongmelong / odJc2DykHcCKp7c5v/IfbiEV05JrmaObPYFT2SLDfQ *coreboot gerrit profile(HTTP Credentials)에서 확인가능
    git push하면 gerrit에 바로 올라감... 핵무섭당.
    *gerrit overview
      https://review.coreboot.org/Documentation/index.html
      https://review.coreboot.org/Documentation/intro-gerrit-walkthrough.html 도 참조

  coreboot issue tracker
    https://ticket.coreboot.org/
    id/pw : melongmelong / melongmelong8*****

  수정내역
  수정1. Makefile에 'ctags' 타겟 추가
    status : merged!
    gerrit : https://review.coreboot.org/c/coreboot/+/85936
    local branch : feature/Makefile    

  참고. coreboot 관련 mailing list, IRC내용
    https://doc.coreboot.org/community/forums.html

10단계(가르치기) - 내용정리
  알게된것
    bootblock 빌드과정
    bootblock x86-32 with qemu환경의 주요로직
    x86, x86 asm, gcc attribute도 일부 알게됨.
    +의도하진않았으나 gerrit
  코멘트
    다른 코드들도 확인하고 영역을 좀 더 넓혀야겠다.
    low level(x86, asm)지식은 중요하다. 좀 더 정진하자.(따로 시간내서 본다기보단 코드보면서 습득하고 실제 테스트해보고, 즉 실습 이 필요하다.)
    bootblock은 아니고 엄청 간단한 수정이지만 gerrit에 리뷰올릴 수 있어 의미있었다.
