next : 완료
*1-10단계학습법 적용
*참고.
  1-6단계, 목표, 계획, 학습데이터 모으는 단계
  7단계(대충 사용 수준까지)
  8단계(이것저것해보기)
  9단계(유용한 것을 할수있는 수준까지 파기)
  10단계(가르치기)

주제 : coreboot 오픈소스 분석 - getting started 정복
학습이유
  coreboot 오픈소스 분석
    low-level 지식 향상 
    오픈소스 프로젝트 참여
    => low-level 커리어 up!
  이번에는 coreboot가 뭔지 기본개념습득을 위함.

학습목표
  coreboot가 뭔지 기본개념습득 및 실물구동
    
학습자료
  coreboot 공식홈페이지 doc(https://doc.coreboot.org/getting_started/index.html)
  coreboot source code

학습계획
  milestone1. coreboot 공식홈페이지 doc의 getting started내용 정복.
  
=======================
milestone1. coreboot 공식홈페이지 doc의 getting started내용 정복.

7단계(대충 사용 수준까지) - getting started 문서내용 정리
1. stages
coreboot는 별도 binary로 빌드된 여러개의 stage들로 구성되어있음.
각 stage들은 CBFS라는 파일시스템에 저장되어있음(필요에따라 압축되어있을수 있음 아닐수도있음.)
stage들은 다음 stage를 load하며, 다음의 순서를 가짐 *일부는 optional stage임(coreboot documents 참조)
  bootblock -> verstage -> romstage -> postcar -> ramstage -> payload

bootblock stage
  cpu reset시 제일 처음실행되는 stage.
  C-environment를 위한 셋업 후 다음 stage를(romstage or verstage) 로드함.
    셋업에는 다음 과정들이 포함
     Cache-As-RAM세팅, stack-pointer세팅, clearmemory for BSS 등
  *Cache-As-RAM : CPU cache를 SRAM처럼 사용하는 방식. 해당 방식은 H/W지원이필요(=CPU instruction 들이 필요함)

verstage
  root-of-trust 가 시작되는 단계임. file에 접근하기 전, file검증을 위한 hook을 install함.
  *root-of-trust : crucial security function을 수행하는 highly reliable HW or FW or SW component.

romstage
  DRAM init, device초기화를 준비(=early device init)하는 단계

postcar stage
  CAR(Cache-As-RAM)리소스를 해제하고, ramstage를 로드함.

ramstage
  main device init(ex. PCI device init, CPU init, Graphic init... 등) 수행
  main device init동안 payload(ex. OS, bootloader)에서 사용할 정보(ex. ACPI table, coreboot table 등)를 table에 기록함.
    
payload stage
  coreboot이 마지막으로 load하는 stage.
  payload부터는 payload SW가 실행(ex. OS, bootloader 등)
  
2. build system
coreboot은 gnu make기반으로 빌드를 수행함.

$(toplevel)/Makefile, $(toplevel)toolchain.mk : 빌드시스템을 정의한 파일임. coreboot빌드 공통으로 사용되는 빌드룰이 기술되어있음.
*/Makefile.mk : project specific 빌드룰.

주요 make 변수들
  $(class)-y variable 
    해당 class에 빌드될 파일들을 기술함
    $(class)는 romstage, subdirs, cbfs-files를 의미(ex. romstage-y)
    $(calss)-$(CONFIG_FOO) 형태로 사용되어짐 *CONFIG_FOO는 y/n/'' 임.(Kconfig option에 따라 세팅 됨)

3. Kconfig
다양한프로젝트(특히 linux kernel)에서 사용되는 configuration(=어떤 feature를 사용할 지를 세팅) tool.
coreboot에서도 이 tool을 사용하여 configuration을 수행함.

Kconfig로 이용하여 configuration정보를 담고있는 value list를 output(build/config.h, .config, build/auto.conf)하고,
해당 output은 source code와 Makefile(gnu make)에 의해서 참조되어 사용된다.!(=어떤거를 컴파일하고 링크할지를 결정)

coreboot에서는 util/kconfig에 Kconfig tool 소스코드가 존재하고 해당 Kconfig tool을 빌드하여 사용함.+ 다른 프로젝트(ex linux kernel)에서 사용되는 Kconfig구현과는 약간 다름(=syntax가 살짝 다르다)

참고. Kconfig Language(=syntax)가 존재함.!

8단계(이것저것해보기) - qemu에서 coreboot 실행(coreboot Tutorial Document!)
QEMU환경에서 coreboot구동을 위한 빌드/실행 step에 대해 기술함(coreboot tutorial -  strating from scratch를 참조하였음)
https://doc.coreboot.org/tutorial/part1.html#

coreboot 빌드순서
1. toolchain 빌드
coreboot빌드에 사용할 toolchain을 빌드(ex. coreboot빌드에 사용할 gcc)하는 단계
  coreboot이 gcc를 포함하여 toolchain을 빌드하는 이유는, 
  coreboot빌드가능한 시스템들간에 사용되는 compiler/tool들이 너무 다양해서 이를 통일하기 위함임.
  즉. 각 시스템에있는 gcc로는 coreboot빌드에사용할 toolchain을 빌드하고, coreboot빌드는 toolchain빌드에서 나온 gcc를 사용한다라고 보면 됨.
make help_toolchain으로 빌드target help를 확인할 수 있음.
i386의 경우
  make crossgcc-i386 로 빌드할 수 있음.

2. payload 빌드
ROM에 install될 payload를 빌드하는 단계
tutorial에서는 coreboot에서 제공하는 시연용 payload임를 빌드함!.
  make -C payloads/coreinfo olddefconfig
  make -C payloads/coreinfo

3. coreboot 빌드
coreboot를 빌드하는 단계 *앞에 빌드한 payload도 선택함(by Kconfig)
Kconfig로 configuration후 make수행함
  make distclean *optional(configuration변경시에는 필수적으로 수행해야함)
  make menuconfig
  make

build/coreboot.rom 화일이 생성되며, coreboot빌드가 다 돌면 아래와 같은 output확인가능(ROM 이미지의 content를 출력해줌.)
FMAP REGION: COREBOOT
Name                           Offset     Type           Size   Comp
cbfs_master_header             0x0        cbfs header        32 none
fallback/romstage              0x80       stage           17024 none
fallback/ramstage              0x4380     stage           61723 LZMA (126316 decompressed)
config                         0x13500    raw              2017 LZMA (5961 decompressed)
revision                       0x13d40    raw               703 none
build_info                     0x14040    raw                97 none
fallback/dsdt.aml              0x14100    raw              4044 none
cmos_layout.bin                0x15100    cmos_layout       640 none
fallback/postcar               0x153c0    stage           21472 none
fallback/payload               0x1a800    simple elf      43491 none
(empty)                        0x25240    null          4029284 none
bootblock                      0x3fcdc0   bootblock       12288 none
Built emulation/qemu-i440fx (QEMU x86 i440fx/piix4)

qemu로 coreboot실행
아래 command로 실행하면 됨
qemu-system-x86_64 -bios build/coreboot.rom -serial stdio
  -bios : 사용할 bios image를 세팅
  -serial : serial output을 세팅

9단계(유용한 것을 할수있는 수준까지 파기) - 7,8단계 내용 review
review하고 내용 업데이트 함.

10단계(가르치기) - 내용정리
알게된 것
  coreboot architecture를 알 수 있었음
    bootblock -> verstage -> romstage -> postcar -> ramstage -> payload 순서로 payload가 로드됨
    각 stage들은 별도 바이너리로 빌드가 됨.
    bootblock : 최초 stage
    verstage : root-of-trust 가 시작되는 단계임
    romstage : DRAM init, device초기화를 준비(=early device init)하는 단계
    postcar : CAR(Cacha-AS-RAM)을 정리
    ramstage : main device init(ex. PCI device init, CPU init, Graphic init... 등) 수행
    paylaod : payload. coreboot이아닌 3rd party software(ex. kernel, grub)이 실행됨

  coreboot 빌드 방법 알 수 있었음
    빌드순서 : toolchain -> payload -> coreboot

  qemu에서 coreboot 구동해볼 수 있었음

  기타.
    Kconfig 개념을 알 수 있었음(정의수준으로만)  

comment
  Getting Started/tutorial수준은 이해완료했다고 봄
    *기존에 알고있던 내용도 있었고, 그떄당시 대비 문서들도 잘 update되어있어서 정리 + remind가 잘된 듯함.
  Next로 tutorial에서 빌드했던 coreboot의 bootblock stage 빌드과정 및 bootblock stage 코드 파악을 시도해봅시다.!

